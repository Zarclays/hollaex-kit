{"ast":null,"code":"import _objectWithoutProperties from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/user/Documents/projects/hollaex/src/components/Notification/Trade.js\";\nimport React from 'react';\nimport math from 'mathjs';\nimport { connect } from 'react-redux';\nimport { ICONS, CURRENCY_PRICE_FORMAT, DEFAULT_COIN_DATA } from '../../config/constants';\nimport STRINGS from '../../config/localizedStrings';\nimport { NotificationWraper, NotificationContent, InformationRow } from './Notification';\nimport { formatToCurrency } from '../../utils/currency';\nvar SIDE_BUY = 'buy';\nvar SIDE_SELL = 'sell';\nexport var getTitleAndIcon = function getTitleAndIcon(side, type) {\n  var data = {\n    icon: '',\n    title: '',\n    onBack: true\n  };\n\n  if (side === SIDE_BUY) {\n    data.icon = ICONS.TRADE_FILLED_SUCESSFUL;\n    data.title = STRINGS.formatString(STRINGS.ORDER_TITLE_TRADE_COMPLETE, React.createElement(\"span\", {\n      className: \"text-capitalize\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, STRINGS.TYPES_VALUES[type]), STRINGS.SIDES_VALUES[SIDE_BUY]);\n  } else if (side === SIDE_SELL) {\n    data.icon = ICONS.TRADE_FILLED_SUCESSFUL;\n    data.title = STRINGS.formatString(STRINGS.ORDER_TITLE_TRADE_COMPLETE, React.createElement(\"span\", {\n      className: \"text-capitalize\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, STRINGS.TYPES_VALUES[type]), STRINGS.SIDES_VALUES[SIDE_SELL]);\n  }\n\n  return data;\n};\n\nvar calculateValues = function calculateValues() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var pair = arguments.length > 1 ? arguments[1] : undefined;\n  var coins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var btcAccumulated = math.fraction(0);\n  var baseAccumulated = math.fraction(0);\n  var averages = [];\n  var baseFormat = coins[pair.pair_base] || DEFAULT_COIN_DATA;\n  var secondaryFormat = coins[pair.pair_2] || DEFAULT_COIN_DATA;\n  data.forEach(function (_ref) {\n    var size = _ref.size,\n        price = _ref.price,\n        filled = _ref.filled,\n        side = _ref.side;\n    var calcSize = size;\n\n    if (side === SIDE_BUY) {\n      calcSize = filled || size;\n    } else if (side === SIDE_SELL) {\n      calcSize = filled || size;\n    }\n\n    btcAccumulated = math.add(btcAccumulated, math.fraction(calcSize));\n    var orderValue = math.multiply(math.fraction(price), math.fraction(calcSize));\n    baseAccumulated = math.add(baseAccumulated, orderValue);\n    averages.push(math.number(orderValue));\n  });\n  return {\n    btc: formatToCurrency(btcAccumulated, baseFormat.min),\n    base: formatToCurrency(baseAccumulated, secondaryFormat.min),\n    average: formatToCurrency(math.median(averages), secondaryFormat.min)\n  };\n};\n\nexport var TradeDisplay = function TradeDisplay(_ref2) {\n  var side = _ref2.side,\n      data = _ref2.data,\n      pairs = _ref2.pairs,\n      coins = _ref2.coins,\n      rest = _objectWithoutProperties(_ref2, [\"side\", \"data\", \"pairs\", \"coins\"]);\n\n  var pair = data[0] ? pairs[data[0].symbol] : {\n    pair_base: '',\n    pair_2: ''\n  };\n  var baseValue = coins[pair.pair_base] || DEFAULT_COIN_DATA;\n  var payValue = coins[pair.pair_2] || DEFAULT_COIN_DATA;\n  var actionText = side === 'sell' ? STRINGS.ORDER_SOLD : STRINGS.ORDER_BOUGHT;\n  var resultText = side === 'sell' ? STRINGS.ORDER_RECEIVED : STRINGS.ORDER_SPENT;\n\n  var _calculateValues = calculateValues(data, pair, coins),\n      btc = _calculateValues.btc,\n      base = _calculateValues.base,\n      average = _calculateValues.average;\n\n  return React.createElement(NotificationContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(InformationRow, {\n    label: actionText,\n    value: STRINGS.formatString(CURRENCY_PRICE_FORMAT, btc, baseValue.symbol.toUpperCase()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(InformationRow, {\n    label: STRINGS.ORDER_AVERAGE_PRICE,\n    value: STRINGS.formatString(CURRENCY_PRICE_FORMAT, average, payValue.symbol.toUpperCase()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(InformationRow, {\n    label: resultText,\n    value: STRINGS.formatString(CURRENCY_PRICE_FORMAT, base, payValue.symbol.toUpperCase()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }));\n};\n\nvar TradeNotification = function TradeNotification(_ref3) {\n  var onClose = _ref3.onClose,\n      _ref3$data = _ref3.data,\n      order = _ref3$data.order,\n      data = _ref3$data.data,\n      pairs = _ref3.pairs,\n      coins = _ref3.coins;\n  var side = order.side,\n      type = order.type;\n  var notificationProps = getTitleAndIcon(side, type);\n  return React.createElement(NotificationWraper, Object.assign({}, notificationProps, {\n    className: \"trade-notification\",\n    compressOnMobile: true,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(TradeDisplay, {\n    side: side,\n    data: data,\n    pairs: pairs,\n    coins: coins,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    pairs: state.app.pairs,\n    coins: state.app.coins\n  };\n};\n\nexport default connect(mapStateToProps)(TradeNotification);","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/components/Notification/Trade.js"],"names":["React","math","connect","ICONS","CURRENCY_PRICE_FORMAT","DEFAULT_COIN_DATA","STRINGS","NotificationWraper","NotificationContent","InformationRow","formatToCurrency","SIDE_BUY","SIDE_SELL","getTitleAndIcon","side","type","data","icon","title","onBack","TRADE_FILLED_SUCESSFUL","formatString","ORDER_TITLE_TRADE_COMPLETE","TYPES_VALUES","SIDES_VALUES","calculateValues","pair","coins","btcAccumulated","fraction","baseAccumulated","averages","baseFormat","pair_base","secondaryFormat","pair_2","forEach","size","price","filled","calcSize","add","orderValue","multiply","push","number","btc","min","base","average","median","TradeDisplay","pairs","rest","symbol","baseValue","payValue","actionText","ORDER_SOLD","ORDER_BOUGHT","resultText","ORDER_RECEIVED","ORDER_SPENT","toUpperCase","ORDER_AVERAGE_PRICE","TradeNotification","onClose","order","notificationProps","mapStateToProps","state","app"],"mappings":"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","sourcesContent":["import React from 'react';\nimport math from 'mathjs';\nimport { connect } from 'react-redux';\nimport { ICONS, CURRENCY_PRICE_FORMAT, DEFAULT_COIN_DATA } from '../../config/constants';\nimport STRINGS from '../../config/localizedStrings';\nimport {\n\tNotificationWraper,\n\tNotificationContent,\n\tInformationRow\n} from './Notification';\nimport { formatToCurrency } from '../../utils/currency';\n\nconst SIDE_BUY = 'buy';\nconst SIDE_SELL = 'sell';\n\nexport const getTitleAndIcon = (side, type) => {\n\tconst data = {\n\t\ticon: '',\n\t\ttitle: '',\n\t\tonBack: true,\n\t};\n\n\tif (side === SIDE_BUY) {\n\t\tdata.icon = ICONS.TRADE_FILLED_SUCESSFUL;\n\t\tdata.title = STRINGS.formatString(\n\t\t\tSTRINGS.ORDER_TITLE_TRADE_COMPLETE,\n\t\t\t<span className=\"text-capitalize\">{STRINGS.TYPES_VALUES[type]}</span>,\n\t\t\tSTRINGS.SIDES_VALUES[SIDE_BUY]\n\t\t);\n\t} else if (side === SIDE_SELL) {\n\t\tdata.icon = ICONS.TRADE_FILLED_SUCESSFUL;\n\t\tdata.title = STRINGS.formatString(\n\t\t\tSTRINGS.ORDER_TITLE_TRADE_COMPLETE,\n\t\t\t<span className=\"text-capitalize\">{STRINGS.TYPES_VALUES[type]}</span>,\n\t\t\tSTRINGS.SIDES_VALUES[SIDE_SELL]\n\t\t);\n\t}\n\n\treturn data;\n};\n\nconst calculateValues = (data = [], pair, coins = {}) => {\n\tlet btcAccumulated = math.fraction(0);\n\tlet baseAccumulated = math.fraction(0);\n\tconst averages = [];\n\tconst baseFormat = coins[pair.pair_base] || DEFAULT_COIN_DATA;\n\tconst secondaryFormat = coins[pair.pair_2] || DEFAULT_COIN_DATA;\n\tdata.forEach(({ size, price, filled, side }) => {\n\t\tlet calcSize = size;\n\t\tif (side === SIDE_BUY) {\n\t\t\tcalcSize = filled || size;\n\t\t} else if (side === SIDE_SELL) {\n\t\t\tcalcSize = filled || size;\n\t\t}\n\t\tbtcAccumulated = math.add(btcAccumulated, math.fraction(calcSize));\n\t\tconst orderValue = math.multiply(math.fraction(price), math.fraction(calcSize));\n\t\tbaseAccumulated = math.add(baseAccumulated, orderValue);\n\t\taverages.push(math.number(orderValue));\n\t});\n\n\treturn {\n\t\tbtc: formatToCurrency(btcAccumulated, baseFormat.min),\n\t\tbase: formatToCurrency(baseAccumulated, secondaryFormat.min),\n\t\taverage: formatToCurrency(math.median(averages), secondaryFormat.min)\n\t};\n};\n\nexport const TradeDisplay = ({ side, data, pairs, coins, ...rest }) => {\n\tconst pair = data[0] ? pairs[data[0].symbol] : { pair_base: '', pair_2: '' };\n\tconst baseValue = coins[pair.pair_base] || DEFAULT_COIN_DATA;\n\tconst payValue = coins[pair.pair_2] || DEFAULT_COIN_DATA;\n\n\tconst actionText =\n\t\tside === 'sell' ? STRINGS.ORDER_SOLD : STRINGS.ORDER_BOUGHT;\n\tconst resultText =\n\t\tside === 'sell' ? STRINGS.ORDER_RECEIVED : STRINGS.ORDER_SPENT;\n\tconst { btc, base, average } = calculateValues(data, pair, coins);\n\treturn (\n\t\t<NotificationContent>\n\t\t\t<InformationRow\n\t\t\t\tlabel={actionText}\n\t\t\t\tvalue={STRINGS.formatString(\n\t\t\t\t\tCURRENCY_PRICE_FORMAT,\n\t\t\t\t\tbtc,\n\t\t\t\t\tbaseValue.symbol.toUpperCase()\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t<InformationRow\n\t\t\t\tlabel={STRINGS.ORDER_AVERAGE_PRICE}\n\t\t\t\tvalue={STRINGS.formatString(\n\t\t\t\t\tCURRENCY_PRICE_FORMAT,\n\t\t\t\t\taverage,\n\t\t\t\t\tpayValue.symbol.toUpperCase()\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t<InformationRow\n\t\t\t\tlabel={resultText}\n\t\t\t\tvalue={STRINGS.formatString(\n\t\t\t\t\tCURRENCY_PRICE_FORMAT,\n\t\t\t\t\tbase,\n\t\t\t\t\tpayValue.symbol.toUpperCase()\n\t\t\t\t)}\n\t\t\t/>\n\t\t</NotificationContent>\n\t);\n};\n\nconst TradeNotification = ({ onClose, data: { order, data }, pairs, coins }) => {\n\tconst { side, type } = order;\n\tconst notificationProps = getTitleAndIcon(side, type);\n\n\treturn (\n\t\t<NotificationWraper\n\t\t\t{...notificationProps}\n\t\t\tclassName=\"trade-notification\"\n\t\t\tcompressOnMobile={true}\n\t\t\tonClose={onClose}\n\t\t>\n\t\t\t<TradeDisplay side={side} data={data} pairs={pairs} coins={coins} />\n\t\t</NotificationWraper>\n\t);\n};\n\nconst mapStateToProps = state => ({\n\tpairs: state.app.pairs,\n\tcoins: state.app.coins\n});\n\nexport default connect(mapStateToProps)(TradeNotification);\n"]},"metadata":{},"sourceType":"module"}