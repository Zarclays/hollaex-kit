{"ast":null,"code":"export var validateRequired = function validateRequired(value) {\n  return value ? undefined : 'Required';\n};\nexport var validatePositiveNumber = function validatePositiveNumber(minValue) {\n  return function (value) {\n    return value >= minValue ? undefined : \"Value must be bigger than \".concat(minValue - 1);\n  };\n};\nexport var validateRange = function validateRange(list) {\n  return function (value) {\n    return list.indexOf(value) > -1 ? undefined : \"Valid values are \".concat(list.join(', '));\n  };\n};\nexport var validateOTP = function validateOTP() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (value.length === 0) {\n    return;\n  }\n\n  if (value.length !== 6) {\n    return 'Invalid length';\n  }\n\n  var find = value.split('').findIndex(function (digit) {\n    var number;\n\n    try {\n      number = parseInt(digit, 10);\n    } catch (e) {\n      number = -1;\n    }\n\n    return !(number >= 0);\n  });\n\n  if (find > -1) {\n    return 'Invalid value. Only Numbers are allowed';\n  }\n\n  return;\n};","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/components/AdminForm/validations.js"],"names":["validateRequired","value","undefined","validatePositiveNumber","minValue","validateRange","list","indexOf","join","validateOTP","length","find","split","findIndex","digit","number","parseInt","e"],"mappings":"AAAA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD;AAAA,SAAYA,KAAK,GAAGC,SAAH,GAAe,UAAhC;AAAA,CAAzB;AACP,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD;AAAA,SAAc,UAACH,KAAD;AAAA,WACnDA,KAAK,IAAIG,QAAT,GAAoBF,SAApB,uCAA6DE,QAAQ,GAAG,CAAxE,CADmD;AAAA,GAAd;AAAA,CAA/B;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD;AAAA,SAAU,UAACL,KAAD;AAAA,WACtCK,IAAI,CAACC,OAAL,CAAaN,KAAb,IAAsB,CAAC,CAAvB,GAA2BC,SAA3B,8BAA2DI,IAAI,CAACE,IAAL,CAAU,IAAV,CAA3D,CADsC;AAAA,GAAV;AAAA,CAAtB;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAgB;AAAA,MAAfR,KAAe,uEAAP,EAAO;;AAC1C,MAAIA,KAAK,CAACS,MAAN,KAAiB,CAArB,EAAwB;AACvB;AACA;;AAED,MAAIT,KAAK,CAACS,MAAN,KAAiB,CAArB,EAAwB;AACvB,WAAO,gBAAP;AACA;;AAED,MAAMC,IAAI,GAAGV,KAAK,CAACW,KAAN,CAAY,EAAZ,EAAgBC,SAAhB,CAA0B,UAACC,KAAD,EAAW;AACjD,QAAIC,MAAJ;;AACA,QAAI;AACHA,MAAAA,MAAM,GAAGC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAjB;AACA,KAFD,CAEE,OAAOG,CAAP,EAAU;AACXF,MAAAA,MAAM,GAAG,CAAC,CAAV;AACA;;AACD,WAAO,EAAEA,MAAM,IAAI,CAAZ,CAAP;AACA,GARY,CAAb;;AASA,MAAIJ,IAAI,GAAG,CAAC,CAAZ,EAAe;AACd,WAAO,yCAAP;AACA;;AAED;AACA,CAvBM","sourcesContent":["export const validateRequired = (value) => (value ? undefined : 'Required');\nexport const validatePositiveNumber = (minValue) => (value) =>\n\tvalue >= minValue ? undefined : `Value must be bigger than ${minValue - 1}`;\nexport const validateRange = (list) => (value) =>\n\tlist.indexOf(value) > -1 ? undefined : `Valid values are ${list.join(', ')}`;\nexport const validateOTP = (value = '') => {\n\tif (value.length === 0) {\n\t\treturn;\n\t}\n\n\tif (value.length !== 6) {\n\t\treturn 'Invalid length';\n\t}\n\n\tconst find = value.split('').findIndex((digit) => {\n\t\tlet number;\n\t\ttry {\n\t\t\tnumber = parseInt(digit, 10);\n\t\t} catch (e) {\n\t\t\tnumber = -1;\n\t\t}\n\t\treturn !(number >= 0);\n\t});\n\tif (find > -1) {\n\t\treturn 'Invalid value. Only Numbers are allowed';\n\t}\n\n\treturn;\n};\n"]},"metadata":{},"sourceType":"module"}