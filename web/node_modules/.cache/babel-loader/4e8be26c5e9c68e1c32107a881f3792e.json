{"ast":null,"code":"import { all } from 'bluebird';\nimport querystring from 'query-string';\nimport { requestAuthenticated } from '../../../utils';\n\nvar toQueryString = function toQueryString(values) {\n  return querystring.stringify(values);\n};\n\nvar handleError = function handleError(err) {\n  return err.data;\n};\n\nexport var requestUserData = function requestUserData(values) {\n  return requestAuthenticated(\"/admin/user?\".concat(toQueryString(values))).catch(handleError).then(function (data) {\n    return data;\n  });\n};\nexport var requestUserBalance = function requestUserBalance(values) {\n  return requestAuthenticated(\"/admin/user/\".concat(values, \"/balance\")).catch(handleError).then(function (data) {\n    return data;\n  });\n};\nexport var requestUserImages = function requestUserImages(values) {\n  return requestAuthenticated(\"/admin/verification?\".concat(toQueryString(values))).catch(handleError).then(function (data) {\n    return data;\n  });\n};\nexport var updateUserData = function updateUserData(values) {\n  var options = {\n    method: 'PUT',\n    body: JSON.stringify(values)\n  };\n  return requestAuthenticated(\"/admin/user/\".concat(values.id), options);\n};\nexport var approveBank = function approveBank(values) {\n  var options = {\n    method: 'POST',\n    body: JSON.stringify(values)\n  };\n  return requestAuthenticated('/admin/user/bank/verify', options);\n};\nexport var rejectBank = function rejectBank(values) {\n  var options = {\n    method: 'POST',\n    body: JSON.stringify(values)\n  };\n  return requestAuthenticated('/admin/user/bank/revoke', options);\n};\nexport var requestUser = function requestUser(values) {\n  var promises = [requestUserData(values), requestUserImages(values)];\n  return all(promises);\n};","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/containers/Admin/User/actions.js"],"names":["all","querystring","requestAuthenticated","toQueryString","values","stringify","handleError","err","data","requestUserData","catch","then","requestUserBalance","requestUserImages","updateUserData","options","method","body","JSON","id","approveBank","rejectBank","requestUser","promises"],"mappings":"AAAA,SAASA,GAAT,QAAoB,UAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,oBAAT,QAAqC,gBAArC;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAAY;AACjC,SAAOH,WAAW,CAACI,SAAZ,CAAsBD,MAAtB,CAAP;AACA,CAFD;;AAIA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD;AAAA,SAASA,GAAG,CAACC,IAAb;AAAA,CAApB;;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACL,MAAD;AAAA,SAC9BF,oBAAoB,uBAAgBC,aAAa,CAACC,MAAD,CAA7B,EAApB,CACEM,KADF,CACQJ,WADR,EAEEK,IAFF,CAEO,UAACH,IAAD;AAAA,WAAUA,IAAV;AAAA,GAFP,CAD8B;AAAA,CAAxB;AAKP,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACR,MAAD;AAAA,SACjCF,oBAAoB,uBAAgBE,MAAhB,cAApB,CACEM,KADF,CACQJ,WADR,EAEEK,IAFF,CAEO,UAACH,IAAD,EAAU;AACf,WAAOA,IAAP;AACA,GAJF,CADiC;AAAA,CAA3B;AAOP,OAAO,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAACT,MAAD;AAAA,SAChCF,oBAAoB,+BAAwBC,aAAa,CAACC,MAAD,CAArC,EAApB,CACEM,KADF,CACQJ,WADR,EAEEK,IAFF,CAEO,UAACH,IAAD;AAAA,WAAUA,IAAV;AAAA,GAFP,CADgC;AAAA,CAA1B;AAKP,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACV,MAAD,EAAY;AACzC,MAAMW,OAAO,GAAG;AACfC,IAAAA,MAAM,EAAE,KADO;AAEfC,IAAAA,IAAI,EAAEC,IAAI,CAACb,SAAL,CAAeD,MAAf;AAFS,GAAhB;AAIA,SAAOF,oBAAoB,uBAAgBE,MAAM,CAACe,EAAvB,GAA6BJ,OAA7B,CAA3B;AACA,CANM;AAQP,OAAO,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAAChB,MAAD,EAAY;AACtC,MAAMW,OAAO,GAAG;AACfC,IAAAA,MAAM,EAAE,MADO;AAEfC,IAAAA,IAAI,EAAEC,IAAI,CAACb,SAAL,CAAeD,MAAf;AAFS,GAAhB;AAIA,SAAOF,oBAAoB,CAAC,yBAAD,EAA4Ba,OAA5B,CAA3B;AACA,CANM;AAQP,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACjB,MAAD,EAAY;AACrC,MAAMW,OAAO,GAAG;AACfC,IAAAA,MAAM,EAAE,MADO;AAEfC,IAAAA,IAAI,EAAEC,IAAI,CAACb,SAAL,CAAeD,MAAf;AAFS,GAAhB;AAIA,SAAOF,oBAAoB,CAAC,yBAAD,EAA4Ba,OAA5B,CAA3B;AACA,CANM;AAQP,OAAO,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAAClB,MAAD,EAAY;AACtC,MAAMmB,QAAQ,GAAG,CAACd,eAAe,CAACL,MAAD,CAAhB,EAA0BS,iBAAiB,CAACT,MAAD,CAA3C,CAAjB;AACA,SAAOJ,GAAG,CAACuB,QAAD,CAAV;AACA,CAHM","sourcesContent":["import { all } from 'bluebird';\nimport querystring from 'query-string';\nimport { requestAuthenticated } from '../../../utils';\n\nconst toQueryString = (values) => {\n\treturn querystring.stringify(values);\n};\n\nconst handleError = (err) => err.data;\n\nexport const requestUserData = (values) =>\n\trequestAuthenticated(`/admin/user?${toQueryString(values)}`)\n\t\t.catch(handleError)\n\t\t.then((data) => data);\n\nexport const requestUserBalance = (values) =>\n\trequestAuthenticated(`/admin/user/${values}/balance`)\n\t\t.catch(handleError)\n\t\t.then((data) => {\n\t\t\treturn data;\n\t\t});\n\nexport const requestUserImages = (values) =>\n\trequestAuthenticated(`/admin/verification?${toQueryString(values)}`)\n\t\t.catch(handleError)\n\t\t.then((data) => data);\n\nexport const updateUserData = (values) => {\n\tconst options = {\n\t\tmethod: 'PUT',\n\t\tbody: JSON.stringify(values)\n\t};\n\treturn requestAuthenticated(`/admin/user/${values.id}`, options);\n};\n\nexport const approveBank = (values) => {\n\tconst options = {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(values)\n\t};\n\treturn requestAuthenticated('/admin/user/bank/verify', options);\n};\n\nexport const rejectBank = (values) => {\n\tconst options = {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(values)\n\t};\n\treturn requestAuthenticated('/admin/user/bank/revoke', options);\n};\n\nexport const requestUser = (values) => {\n\tconst promises = [requestUserData(values), requestUserImages(values)];\n\treturn all(promises);\n};\n"]},"metadata":{},"sourceType":"module"}