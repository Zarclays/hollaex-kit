{"ast":null,"code":"import _objectSpread from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/Documents/projects/hollaex/src/containers/Summary/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { isMobile } from 'react-device-detect';\nimport moment from 'moment';\nimport SummaryBlock from './components/SummaryBlock';\nimport TraderAccounts from './components/TraderAccounts';\nimport SummaryRequirements from './components/SummaryRequirements';\nimport AccountAssets from './components/AccountAssets';\nimport TradingVolume from './components/TradingVolume';\nimport AccountDetails from './components/AccountDetails';\nimport MobileSummary from './MobileSummary';\nimport { IconTitle } from '../../components';\nimport { logout } from '../../actions/authAction';\nimport { openFeesStructureandLimits, openContactForm, logoutconfirm, setNotification, NOTIFICATIONS } from '../../actions/appActions';\nimport { BASE_CURRENCY, TRADING_ACCOUNT_TYPE, DEFAULT_COIN_DATA } from '../../config/constants';\nimport STRINGS from '../../config/localizedStrings';\nimport { formatToCurrency, formatAverage, formatBaseAmount, calculateBalancePrice, donutFormatPercentage, calculatePrice, calculatePricePercentage } from '../../utils/currency';\nimport { getLastMonthVolume } from './components/utils';\nvar default_trader_account = TRADING_ACCOUNT_TYPE.shrimp;\n\nvar Summary =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Summary, _Component);\n\n  function Summary() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Summary);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Summary)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedAccount: default_trader_account.symbol,\n      currentTradingAccount: default_trader_account,\n      chartData: [],\n      totalAssets: '',\n      lastMonthVolume: 0\n    };\n\n    _this.logoutConfirm = function () {\n      _this.props.logoutconfirm();\n    };\n\n    _this.onFeesAndLimits = function (tradingAccount) {\n      _this.props.openFeesStructureandLimits({\n        verification_level: tradingAccount.level,\n        tradingAccount: tradingAccount\n      });\n    };\n\n    _this.onAccountTypeChange = function (type) {\n      _this.setState({\n        selectedAccount: type\n      });\n    };\n\n    _this.onUpgradeAccount = function () {\n      _this.props.openContactForm({\n        category: 'level'\n      });\n    };\n\n    _this.calculateSections = function (_ref) {\n      var price = _ref.price,\n          balance = _ref.balance,\n          orders = _ref.orders,\n          prices = _ref.prices,\n          coins = _ref.coins;\n      var data = [];\n      var totalAssets = calculateBalancePrice(balance, prices);\n      Object.keys(coins).forEach(function (currency) {\n        var _ref2 = coins[currency] || DEFAULT_COIN_DATA,\n            symbol = _ref2.symbol,\n            min = _ref2.min;\n\n        var currencyBalance = calculatePrice(balance[\"\".concat(symbol, \"_balance\")], prices[currency]);\n        var balancePercent = calculatePricePercentage(currencyBalance, totalAssets);\n        data.push(_objectSpread({}, coins[currency], {\n          balance: balancePercent,\n          balanceFormat: formatToCurrency(currencyBalance, min),\n          balancePercentage: donutFormatPercentage(balancePercent)\n        }));\n      });\n\n      _this.setState({\n        chartData: data,\n        totalAssets: formatAverage(formatBaseAmount(totalAssets))\n      });\n    };\n\n    _this.setCurrentTradeAccount = function (user) {\n      var currentTradingAccount = _this.state.currentTradingAccount;\n\n      switch (user.verification_level) {\n        case 1:\n          currentTradingAccount = TRADING_ACCOUNT_TYPE.shrimp;\n          break;\n\n        case 2:\n          currentTradingAccount = TRADING_ACCOUNT_TYPE.snapper;\n          break;\n\n        case 3:\n          currentTradingAccount = TRADING_ACCOUNT_TYPE.kraken;\n          break;\n\n        case 4:\n          currentTradingAccount = TRADING_ACCOUNT_TYPE.leviathan;\n          break;\n\n        default:\n          currentTradingAccount = TRADING_ACCOUNT_TYPE.leviathan;\n          break;\n      }\n\n      _this.setState({\n        currentTradingAccount: currentTradingAccount,\n        selectedAccount: currentTradingAccount.symbol\n      });\n    };\n\n    _this.onInviteFriends = function () {\n      _this.props.setNotification(NOTIFICATIONS.INVITE_FRIENDS, {\n        affiliation_code: _this.props.user.affiliation_code\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Summary, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          user = _this$props.user,\n          tradeVolumes = _this$props.tradeVolumes,\n          pairs = _this$props.pairs,\n          prices = _this$props.prices;\n\n      if (user.id) {\n        this.calculateSections(this.props);\n        this.setCurrentTradeAccount(user);\n      }\n\n      if (tradeVolumes.fetched) {\n        var lastMonthVolume = getLastMonthVolume(tradeVolumes.data, prices, pairs);\n        this.setState({\n          lastMonthVolume: lastMonthVolume\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.user.id !== this.props.user.id || nextProps.price !== this.props.price || nextProps.orders.length !== this.props.orders.length || nextProps.balance.timestamp !== this.props.balance.timestamp || JSON.stringify(this.props.prices) !== JSON.stringify(nextProps.prices) || nextProps.activeLanguage !== this.props.activeLanguage) {\n        this.calculateSections(nextProps);\n      }\n\n      if (this.props.user.verification_level !== nextProps.user.verification_level) {\n        this.setCurrentTradeAccount(nextProps.user);\n      }\n\n      if (JSON.stringify(this.props.tradeVolumes) !== JSON.stringify(nextProps.tradeVolumes)) {\n        var lastMonthVolume = getLastMonthVolume(nextProps.tradeVolumes.data, nextProps.prices, nextProps.pairs);\n        this.setState({\n          lastMonthVolume: lastMonthVolume\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          user = _this$props2.user,\n          balance = _this$props2.balance,\n          activeTheme = _this$props2.activeTheme,\n          pairs = _this$props2.pairs,\n          coins = _this$props2.coins;\n      var _this$state = this.state,\n          selectedAccount = _this$state.selectedAccount,\n          currentTradingAccount = _this$state.currentTradingAccount,\n          chartData = _this$state.chartData,\n          totalAssets = _this$state.totalAssets,\n          lastMonthVolume = _this$state.lastMonthVolume;\n\n      var _ref3 = coins[BASE_CURRENCY] || DEFAULT_COIN_DATA,\n          fullname = _ref3.fullname;\n\n      return React.createElement(\"div\", {\n        className: \"summary-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, !isMobile && React.createElement(IconTitle, {\n        text: \"\".concat(STRINGS.SUMMARY.TITLE),\n        textType: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), isMobile ? React.createElement(MobileSummary, {\n        user: user,\n        pairs: pairs,\n        coins: coins,\n        activeTheme: activeTheme,\n        default_trader_account: default_trader_account,\n        currentTradingAccount: currentTradingAccount,\n        selectedAccount: selectedAccount,\n        logout: this.logoutConfirm,\n        balance: balance,\n        chartData: chartData,\n        totalAssets: totalAssets,\n        lastMonthVolume: lastMonthVolume,\n        onInviteFriends: this.onInviteFriends,\n        onFeesAndLimits: this.onFeesAndLimits,\n        onUpgradeAccount: this.onUpgradeAccount,\n        onAccountTypeChange: this.onAccountTypeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"d-flex align-items-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"summary-section_1 trader-account-wrapper d-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(SummaryBlock, {\n        title: currentTradingAccount.fullName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(TraderAccounts, {\n        pairs: pairs,\n        coins: coins,\n        activeTheme: activeTheme,\n        account: currentTradingAccount,\n        onFeesAndLimits: this.onFeesAndLimits,\n        onUpgradeAccount: this.onUpgradeAccount,\n        onInviteFriends: this.onInviteFriends,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"summary-section_1 requirement-wrapper d-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(SummaryBlock, {\n        title: STRINGS.SUMMARY.URGENT_REQUIREMENTS,\n        wrapperClassname: \"w-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(SummaryRequirements, {\n        coins: coins,\n        user: user,\n        lastMonthVolume: lastMonthVolume,\n        contentClassName: \"requirements-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"d-flex align-items-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"assets-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(SummaryBlock, {\n        title: STRINGS.SUMMARY.ACCOUNT_ASSETS,\n        secondaryTitle: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"title-font\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, totalAssets), \" \".concat(fullname)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(AccountAssets, {\n        user: user,\n        chartData: chartData,\n        totalAssets: totalAssets,\n        balance: balance,\n        coins: coins,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"trading-volume-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(SummaryBlock, {\n        title: STRINGS.SUMMARY.TRADING_VOLUME,\n        secondaryTitle: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"title-font\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, \" \".concat(formatAverage(formatBaseAmount(lastMonthVolume)))), \" \".concat(fullname, \" \").concat(STRINGS.formatString(STRINGS.SUMMARY.NOMINAL_TRADING_WITH_MONTH, moment().subtract(1, \"month\").startOf(\"month\").format('MMMM')).join(''))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(TradingVolume, {\n        user: user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"d-flex align-items-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(SummaryBlock, {\n        title: STRINGS.SUMMARY.ACCOUNT_DETAILS,\n        secondaryTitle: currentTradingAccount.name,\n        wrapperClassname: \"w-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(AccountDetails, {\n        user: user,\n        coins: coins,\n        pairs: pairs,\n        activeTheme: activeTheme,\n        currentTradingAccount: currentTradingAccount.symbol,\n        selectedAccount: selectedAccount,\n        lastMonthVolume: lastMonthVolume,\n        onAccountTypeChange: this.onAccountTypeChange,\n        onFeesAndLimits: this.onFeesAndLimits,\n        onUpgradeAccount: this.onUpgradeAccount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Summary;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    pairs: state.app.pairs,\n    coins: state.app.coins,\n    user: state.user,\n    verification_level: state.user.verification_level,\n    balance: state.user.balance,\n    activeTheme: state.app.theme,\n    prices: state.orderbook.prices,\n    symbol: state.orderbook.symbol,\n    price: state.orderbook.price,\n    orders: state.order.activeOrders,\n    activeLanguage: state.app.language,\n    tradeVolumes: state.user.tradeVolumes\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    logoutconfirm: bindActionCreators(logoutconfirm, dispatch),\n    logout: bindActionCreators(logout, dispatch),\n    openFeesStructureandLimits: bindActionCreators(openFeesStructureandLimits, dispatch),\n    openContactForm: bindActionCreators(openContactForm, dispatch),\n    setNotification: bindActionCreators(setNotification, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Summary);","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/containers/Summary/index.js"],"names":["React","Component","connect","bindActionCreators","isMobile","moment","SummaryBlock","TraderAccounts","SummaryRequirements","AccountAssets","TradingVolume","AccountDetails","MobileSummary","IconTitle","logout","openFeesStructureandLimits","openContactForm","logoutconfirm","setNotification","NOTIFICATIONS","BASE_CURRENCY","TRADING_ACCOUNT_TYPE","DEFAULT_COIN_DATA","STRINGS","formatToCurrency","formatAverage","formatBaseAmount","calculateBalancePrice","donutFormatPercentage","calculatePrice","calculatePricePercentage","getLastMonthVolume","default_trader_account","shrimp","Summary","state","selectedAccount","symbol","currentTradingAccount","chartData","totalAssets","lastMonthVolume","logoutConfirm","props","onFeesAndLimits","tradingAccount","verification_level","level","onAccountTypeChange","type","setState","onUpgradeAccount","category","calculateSections","price","balance","orders","prices","coins","data","Object","keys","forEach","currency","min","currencyBalance","balancePercent","push","balanceFormat","balancePercentage","setCurrentTradeAccount","user","snapper","kraken","leviathan","onInviteFriends","INVITE_FRIENDS","affiliation_code","tradeVolumes","pairs","id","fetched","nextProps","length","timestamp","JSON","stringify","activeLanguage","activeTheme","fullname","SUMMARY","TITLE","fullName","URGENT_REQUIREMENTS","ACCOUNT_ASSETS","TRADING_VOLUME","formatString","NOMINAL_TRADING_WITH_MONTH","subtract","startOf","format","join","ACCOUNT_DETAILS","name","mapStateToProps","app","theme","orderbook","order","activeOrders","language","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { isMobile } from 'react-device-detect';\nimport moment from 'moment';\n\nimport SummaryBlock from './components/SummaryBlock';\nimport TraderAccounts from './components/TraderAccounts';\nimport SummaryRequirements from './components/SummaryRequirements';\nimport AccountAssets from './components/AccountAssets';\nimport TradingVolume from './components/TradingVolume';\nimport AccountDetails from './components/AccountDetails';\nimport MobileSummary from './MobileSummary';\n\nimport { IconTitle } from '../../components';\nimport { logout } from '../../actions/authAction';\nimport { openFeesStructureandLimits, openContactForm, logoutconfirm, setNotification, NOTIFICATIONS } from '../../actions/appActions';\nimport { BASE_CURRENCY, TRADING_ACCOUNT_TYPE, DEFAULT_COIN_DATA } from '../../config/constants';\nimport STRINGS from '../../config/localizedStrings';\nimport {\n    formatToCurrency,\n    formatAverage,\n    formatBaseAmount,\n    calculateBalancePrice,\n    donutFormatPercentage,\n    calculatePrice,\n    calculatePricePercentage\n} from '../../utils/currency';\nimport { getLastMonthVolume } from './components/utils';\n\nconst default_trader_account = TRADING_ACCOUNT_TYPE.shrimp;\n\nclass Summary extends Component {\n    state = {\n        selectedAccount: default_trader_account.symbol,\n        currentTradingAccount: default_trader_account,\n        chartData: [],\n        totalAssets: '',\n        lastMonthVolume: 0\n    };\n\n\n    componentDidMount() {\n        const { user, tradeVolumes, pairs, prices } = this.props;\n\n        if (user.id) {\n            this.calculateSections(this.props);\n            this.setCurrentTradeAccount(user);\n        }\n        if (tradeVolumes.fetched) {\n            let lastMonthVolume = getLastMonthVolume(tradeVolumes.data, prices, pairs);\n            this.setState({ lastMonthVolume });\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (\n            nextProps.user.id !== this.props.user.id ||\n            nextProps.price !== this.props.price ||\n            nextProps.orders.length !== this.props.orders.length ||\n            nextProps.balance.timestamp !== this.props.balance.timestamp ||\n            JSON.stringify(this.props.prices) !== JSON.stringify(nextProps.prices) ||\n            nextProps.activeLanguage !== this.props.activeLanguage\n        ) {\n            this.calculateSections(nextProps);\n        }\n        if (this.props.user.verification_level !== nextProps.user.verification_level) {\n            this.setCurrentTradeAccount(nextProps.user);\n        }\n        if (JSON.stringify(this.props.tradeVolumes) !== JSON.stringify(nextProps.tradeVolumes)) {\n            let lastMonthVolume = getLastMonthVolume(nextProps.tradeVolumes.data, nextProps.prices, nextProps.pairs);\n            this.setState({ lastMonthVolume });\n        }\n    }\n\n    logoutConfirm = () => {\n        this.props.logoutconfirm()\n    }\n\n    onFeesAndLimits = tradingAccount => {\n        this.props.openFeesStructureandLimits({\n            verification_level: tradingAccount.level,\n            tradingAccount\n        });\n    };\n\n    onAccountTypeChange = type => {\n        this.setState({ selectedAccount: type });\n    };\n\n    onUpgradeAccount = () => {\n        this.props.openContactForm({ category: 'level' });\n    };\n\n    calculateSections = ({ price, balance, orders, prices, coins }) => {\n        const data = [];\n\n        const totalAssets = calculateBalancePrice(balance, prices);\n        Object.keys(coins).forEach((currency) => {\n            const { symbol, min } = coins[currency] || DEFAULT_COIN_DATA;\n            const currencyBalance = calculatePrice(balance[`${symbol}_balance`], prices[currency]);\n            const balancePercent = calculatePricePercentage(currencyBalance, totalAssets);\n            data.push({\n                ...coins[currency],\n                balance: balancePercent,\n                balanceFormat: formatToCurrency(currencyBalance, min),\n                balancePercentage: donutFormatPercentage(balancePercent),\n            });\n        });\n\n        this.setState({ chartData: data, totalAssets: formatAverage(formatBaseAmount(totalAssets)) });\n    };\n\n    setCurrentTradeAccount = user => {\n        let currentTradingAccount = this.state.currentTradingAccount;\n        switch (user.verification_level) {\n            case 1:\n                currentTradingAccount = TRADING_ACCOUNT_TYPE.shrimp;\n                break;\n            case 2:\n                currentTradingAccount = TRADING_ACCOUNT_TYPE.snapper;\n                break;\n            case 3:\n                currentTradingAccount = TRADING_ACCOUNT_TYPE.kraken;\n                break;\n            case 4:\n                currentTradingAccount = TRADING_ACCOUNT_TYPE.leviathan;\n                break;\n            default:\n                currentTradingAccount = TRADING_ACCOUNT_TYPE.leviathan;\n                break;\n        }\n        this.setState({ currentTradingAccount, selectedAccount: currentTradingAccount.symbol });\n    };\n\n    onInviteFriends = () => {\n        this.props.setNotification(NOTIFICATIONS.INVITE_FRIENDS, { affiliation_code: this.props.user.affiliation_code });\n    };\n\n    render() {\n        const { user, balance, activeTheme, pairs, coins } = this.props;\n        const { selectedAccount, currentTradingAccount, chartData, totalAssets, lastMonthVolume } = this.state;\n        const { fullname } = coins[BASE_CURRENCY] || DEFAULT_COIN_DATA;\n        return (\n            <div className=\"summary-container\">\n                {!isMobile && <IconTitle\n                    text={`${STRINGS.SUMMARY.TITLE}`}\n                    textType=\"title\"\n                />}\n                {isMobile\n                    ? <MobileSummary\n                        user={user}\n                        pairs={pairs}\n                        coins={coins}\n                        activeTheme={activeTheme}\n                        default_trader_account={default_trader_account}\n                        currentTradingAccount={currentTradingAccount}\n                        selectedAccount={selectedAccount}\n                        logout={this.logoutConfirm}\n                        balance={balance}\n                        chartData={chartData}\n                        totalAssets={totalAssets}\n                        lastMonthVolume={lastMonthVolume}\n                        onInviteFriends={this.onInviteFriends}\n                        onFeesAndLimits={this.onFeesAndLimits}\n                        onUpgradeAccount={this.onUpgradeAccount}\n                        onAccountTypeChange={this.onAccountTypeChange}\n                    />\n                    : (<div>\n                        <div className=\"d-flex align-items-center\">\n                            <div className=\"summary-section_1 trader-account-wrapper d-flex\">\n                                <SummaryBlock title={currentTradingAccount.fullName} >\n                                    <TraderAccounts\n                                        pairs={pairs}\n                                        coins={coins}\n                                        activeTheme={activeTheme}\n                                        account={currentTradingAccount}\n                                        onFeesAndLimits={this.onFeesAndLimits}\n                                        onUpgradeAccount={this.onUpgradeAccount}\n                                        onInviteFriends={this.onInviteFriends} />\n                                </SummaryBlock>\n                            </div>\n                            <div className=\"summary-section_1 requirement-wrapper d-flex\">\n                                <SummaryBlock\n                                    title={STRINGS.SUMMARY.URGENT_REQUIREMENTS}\n                                    wrapperClassname=\"w-100\" >\n                                    <SummaryRequirements\n                                        coins={coins}\n                                        user={user}\n                                        lastMonthVolume={lastMonthVolume}\n                                        contentClassName=\"requirements-content\" />\n                                </SummaryBlock>\n                            </div>\n                        </div>\n                        <div className=\"d-flex align-items-center\">\n                            <div className=\"assets-wrapper\">\n                                <SummaryBlock\n                                    title={STRINGS.SUMMARY.ACCOUNT_ASSETS}\n                                    secondaryTitle={<span><span className=\"title-font\">{totalAssets}</span>{` ${fullname}`}</span>} >\n                                    <AccountAssets\n                                        user={user}\n                                        chartData={chartData}\n                                        totalAssets={totalAssets}\n                                        balance={balance}\n                                        coins={coins} />\n                                </SummaryBlock>\n                            </div>\n                            <div className=\"trading-volume-wrapper\">\n                                <SummaryBlock\n                                    title={STRINGS.SUMMARY.TRADING_VOLUME}\n                                    secondaryTitle={<span>\n                                        <span className=\"title-font\">\n                                            {` ${formatAverage(formatBaseAmount(lastMonthVolume))}`}\n                                        </span>\n                                        {` ${fullname} ${STRINGS.formatString(STRINGS.SUMMARY.NOMINAL_TRADING_WITH_MONTH, moment().subtract(1, \"month\").startOf(\"month\").format('MMMM')).join('')}`}\n                                    </span>\n                                    }\n                                >\n                                    <TradingVolume user={user} />\n                                </SummaryBlock>\n                            </div>\n                        </div>\n                        <div className=\"d-flex align-items-center\">\n                            <SummaryBlock\n                                title={STRINGS.SUMMARY.ACCOUNT_DETAILS}\n                                secondaryTitle={currentTradingAccount.name}\n                                wrapperClassname=\"w-100\" >\n                                <AccountDetails\n                                    user={user}\n                                    coins={coins}\n                                    pairs={pairs}\n                                    activeTheme={activeTheme}\n                                    currentTradingAccount={currentTradingAccount.symbol}\n                                    selectedAccount={selectedAccount}\n                                    lastMonthVolume={lastMonthVolume}\n                                    onAccountTypeChange={this.onAccountTypeChange}\n                                    onFeesAndLimits={this.onFeesAndLimits}\n                                    onUpgradeAccount={this.onUpgradeAccount} />\n                            </SummaryBlock>\n                        </div>\n                    </div>)\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    pairs: state.app.pairs,\n    coins: state.app.coins,\n    user: state.user,\n    verification_level: state.user.verification_level,\n    balance: state.user.balance,\n    activeTheme: state.app.theme,\n    prices: state.orderbook.prices,\n    symbol: state.orderbook.symbol,\n    price: state.orderbook.price,\n    orders: state.order.activeOrders,\n    activeLanguage: state.app.language,\n    tradeVolumes: state.user.tradeVolumes\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    logoutconfirm: bindActionCreators(logoutconfirm, dispatch),\n    logout: bindActionCreators(logout, dispatch),\n    openFeesStructureandLimits: bindActionCreators(openFeesStructureandLimits, dispatch),\n    openContactForm: bindActionCreators(openContactForm, dispatch),\n    setNotification: bindActionCreators(setNotification, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Summary);\n\n"]},"metadata":{},"sourceType":"module"}