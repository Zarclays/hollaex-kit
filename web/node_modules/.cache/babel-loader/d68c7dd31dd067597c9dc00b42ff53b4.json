{"ast":null,"code":"import _objectSpread from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport 'whatwg-fetch';\nimport { API_URL } from '../config/constants';\nimport { getToken } from './token';\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\n\nvar parseJSON = function parseJSON(response) {\n  return response.json();\n};\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\n\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  return response.json().then(function (data) {\n    var error = new Error(response.statusText);\n    error.data = data;\n    throw error;\n  }); // .catch((err) => {\n  //   const error = new Error(response.statusText);\n  //   error.response = response;\n  //   throw error;\n  // });\n}\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\n\n\nexport var requestAuthenticated = function requestAuthenticated(url, paramOptions, headers) {\n  var TOKEN = getToken();\n\n  var options = _objectSpread({\n    method: 'GET',\n    headers: headers ? _objectSpread({}, headers, {\n      authorization: \"Bearer \".concat(TOKEN)\n    }) : {\n      'Content-Type': 'application/json',\n      authorization: \"Bearer \".concat(TOKEN)\n    }\n  }, paramOptions);\n\n  return request(url, options);\n};\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\n\nvar request = function request(url, options) {\n  return fetch(\"\".concat(API_URL).concat(url), options).then(checkStatus).then(parseJSON);\n};\n\nexport default request;","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/utils/request.js"],"names":["API_URL","getToken","parseJSON","response","json","checkStatus","status","then","data","error","Error","statusText","requestAuthenticated","url","paramOptions","headers","TOKEN","options","method","authorization","request","fetch"],"mappings":";AAAA,OAAO,cAAP;AACA,SAASA,OAAT,QAAwB,qBAAxB;AAEA,SAASC,QAAT,QAAyB,SAAzB;AAEA;;;;;;;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAc;AAC/B,SAAOA,QAAQ,CAACC,IAAT,EAAP;AACA,CAFD;AAIA;;;;;;;;;AAOA,SAASC,WAAT,CAAqBF,QAArB,EAA+B;AAC9B,MAAIA,QAAQ,CAACG,MAAT,IAAmB,GAAnB,IAA0BH,QAAQ,CAACG,MAAT,GAAkB,GAAhD,EAAqD;AACpD,WAAOH,QAAP;AACA;;AAED,SAAOA,QAAQ,CAACC,IAAT,GAAgBG,IAAhB,CAAqB,UAACC,IAAD,EAAU;AACrC,QAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUP,QAAQ,CAACQ,UAAnB,CAAd;AACAF,IAAAA,KAAK,CAACD,IAAN,GAAaA,IAAb;AACA,UAAMC,KAAN;AACA,GAJM,CAAP,CAL8B,CAU9B;AACA;AACA;AACA;AACA;AACA;AAED;;;;;;;;;;AAQA,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,GAAD,EAAMC,YAAN,EAAoBC,OAApB,EAAgC;AACnE,MAAMC,KAAK,GAAGf,QAAQ,EAAtB;;AACA,MAAMgB,OAAO;AACZC,IAAAA,MAAM,EAAE,KADI;AAEZH,IAAAA,OAAO,EAAEA,OAAO,qBAEVA,OAFU;AAGbI,MAAAA,aAAa,mBAAYH,KAAZ;AAHA,SAKb;AACA,sBAAgB,kBADhB;AAEAG,MAAAA,aAAa,mBAAYH,KAAZ;AAFb;AAPS,KAWTF,YAXS,CAAb;;AAaA,SAAOM,OAAO,CAACP,GAAD,EAAMI,OAAN,CAAd;AACA,CAhBM;AAkBP;;;;;;;;;AAQA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACP,GAAD,EAAMI,OAAN,EAAkB;AACjC,SAAOI,KAAK,WAAIrB,OAAJ,SAAca,GAAd,GAAqBI,OAArB,CAAL,CACLV,IADK,CACAF,WADA,EAELE,IAFK,CAEAL,SAFA,CAAP;AAGA,CAJD;;AAMA,eAAekB,OAAf","sourcesContent":["import 'whatwg-fetch';\nimport { API_URL } from '../config/constants';\n\nimport { getToken } from './token';\n\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nconst parseJSON = (response) => {\n\treturn response.json();\n};\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n\tif (response.status >= 200 && response.status < 300) {\n\t\treturn response;\n\t}\n\n\treturn response.json().then((data) => {\n\t\tconst error = new Error(response.statusText);\n\t\terror.data = data;\n\t\tthrow error;\n\t});\n\t// .catch((err) => {\n\t//   const error = new Error(response.statusText);\n\t//   error.response = response;\n\t//   throw error;\n\t// });\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport const requestAuthenticated = (url, paramOptions, headers) => {\n\tconst TOKEN = getToken();\n\tconst options = {\n\t\tmethod: 'GET',\n\t\theaders: headers\n\t\t\t? {\n\t\t\t\t\t...headers,\n\t\t\t\t\tauthorization: `Bearer ${TOKEN}`\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\tauthorization: `Bearer ${TOKEN}`\n\t\t\t  },\n\t\t...paramOptions\n\t};\n\treturn request(url, options);\n};\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nconst request = (url, options) => {\n\treturn fetch(`${API_URL}${url}`, options)\n\t\t.then(checkStatus)\n\t\t.then(parseJSON);\n};\n\nexport default request;\n"]},"metadata":{},"sourceType":"module"}