{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/projects/hollaex/src/utils/countries.js\";\n// https://github.com/OpenBookPrices/country-data\nimport React from 'react';\nimport classnames from 'classnames';\nimport { countries } from 'country-data';\nimport STRINGS from '../config/localizedStrings';\nimport { DEFAULT_COUNTRY } from '../config/constants';\n\nvar convertCountry = function convertCountry() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    value: value.alpha2,\n    name: value.name,\n    label: value.name,\n    phoneCode: value.countryCallingCodes.length > 0 ? value.countryCallingCodes[0] : '',\n    flag: React.createElement(\"span\", {\n      className: classnames('flag-icon', \"flag-icon-\".concat(value.alpha2.toLowerCase()), 'icon'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    })\n  };\n};\n\nvar filterCountries = function filterCountries(country) {\n  return country.status === 'assigned' && country.alpha2;\n};\n\nexport var initialCountry = convertCountry(countries[DEFAULT_COUNTRY]);\nexport var NATIONAL_COUNTRY_VALUE = initialCountry.value;\nexport var COUNTRIES = countries.all.filter(filterCountries).map(convertCountry);\nexport default COUNTRIES;\nexport var COUNTRIES_OPTIONS = COUNTRIES.map(function (country) {\n  return {\n    label: country.name,\n    value: country.value,\n    icon: country.flag\n  };\n});\nexport var PHONE_OPTIONS = COUNTRIES.map(function (country) {\n  return {\n    label: STRINGS.formatString(STRINGS.USER_VERIFICATION.USER_DOCUMENTATION_FORM.FORM_FIELDS.PHONE_CODE_DISPLAY, country.phoneCode, country.name).join(''),\n    value: country.phoneCode,\n    icon: country.flag\n  };\n});","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/utils/countries.js"],"names":["React","classnames","countries","STRINGS","DEFAULT_COUNTRY","convertCountry","value","alpha2","name","label","phoneCode","countryCallingCodes","length","flag","toLowerCase","filterCountries","country","status","initialCountry","NATIONAL_COUNTRY_VALUE","COUNTRIES","all","filter","map","COUNTRIES_OPTIONS","icon","PHONE_OPTIONS","formatString","USER_VERIFICATION","USER_DOCUMENTATION_FORM","FORM_FIELDS","PHONE_CODE_DISPLAY","join"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACtC,SAAO;AACNA,IAAAA,KAAK,EAAEA,KAAK,CAACC,MADP;AAENC,IAAAA,IAAI,EAAEF,KAAK,CAACE,IAFN;AAGNC,IAAAA,KAAK,EAAEH,KAAK,CAACE,IAHP;AAINE,IAAAA,SAAS,EACRJ,KAAK,CAACK,mBAAN,CAA0BC,MAA1B,GAAmC,CAAnC,GAAuCN,KAAK,CAACK,mBAAN,CAA0B,CAA1B,CAAvC,GAAsE,EALjE;AAMNE,IAAAA,IAAI,EACH;AACC,MAAA,SAAS,EAAEZ,UAAU,CACpB,WADoB,sBAEPK,KAAK,CAACC,MAAN,CAAaO,WAAb,EAFO,GAGpB,MAHoB,CADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPK,GAAP;AAgBA,CAjBD;;AAmBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD;AAAA,SACvBA,OAAO,CAACC,MAAR,KAAmB,UAAnB,IAAiCD,OAAO,CAACT,MADlB;AAAA,CAAxB;;AAGA,OAAO,IAAMW,cAAc,GAAGb,cAAc,CAACH,SAAS,CAACE,eAAD,CAAV,CAArC;AACP,OAAO,IAAMe,sBAAsB,GAAGD,cAAc,CAACZ,KAA9C;AAEP,OAAO,IAAMc,SAAS,GAAGlB,SAAS,CAACmB,GAAV,CACvBC,MADuB,CAChBP,eADgB,EAEvBQ,GAFuB,CAEnBlB,cAFmB,CAAlB;AAIP,eAAee,SAAf;AAEA,OAAO,IAAMI,iBAAiB,GAAGJ,SAAS,CAACG,GAAV,CAAc,UAACP,OAAD;AAAA,SAAc;AAC5DP,IAAAA,KAAK,EAAEO,OAAO,CAACR,IAD6C;AAE5DF,IAAAA,KAAK,EAAEU,OAAO,CAACV,KAF6C;AAG5DmB,IAAAA,IAAI,EAAET,OAAO,CAACH;AAH8C,GAAd;AAAA,CAAd,CAA1B;AAMP,OAAO,IAAMa,aAAa,GAAGN,SAAS,CAACG,GAAV,CAAc,UAACP,OAAD;AAAA,SAAc;AACxDP,IAAAA,KAAK,EAAEN,OAAO,CAACwB,YAAR,CACNxB,OAAO,CAACyB,iBAAR,CAA0BC,uBAA1B,CAAkDC,WAAlD,CACEC,kBAFI,EAGNf,OAAO,CAACN,SAHF,EAINM,OAAO,CAACR,IAJF,EAKLwB,IALK,CAKA,EALA,CADiD;AAOxD1B,IAAAA,KAAK,EAAEU,OAAO,CAACN,SAPyC;AAQxDe,IAAAA,IAAI,EAAET,OAAO,CAACH;AAR0C,GAAd;AAAA,CAAd,CAAtB","sourcesContent":["// https://github.com/OpenBookPrices/country-data\nimport React from 'react';\nimport classnames from 'classnames';\nimport { countries } from 'country-data';\nimport STRINGS from '../config/localizedStrings';\nimport { DEFAULT_COUNTRY } from '../config/constants';\n\nconst convertCountry = (value = {}) => {\n\treturn {\n\t\tvalue: value.alpha2,\n\t\tname: value.name,\n\t\tlabel: value.name,\n\t\tphoneCode:\n\t\t\tvalue.countryCallingCodes.length > 0 ? value.countryCallingCodes[0] : '',\n\t\tflag: (\n\t\t\t<span\n\t\t\t\tclassName={classnames(\n\t\t\t\t\t'flag-icon',\n\t\t\t\t\t`flag-icon-${value.alpha2.toLowerCase()}`,\n\t\t\t\t\t'icon'\n\t\t\t\t)}\n\t\t\t/>\n\t\t)\n\t};\n};\n\nconst filterCountries = (country) =>\n\tcountry.status === 'assigned' && country.alpha2;\n\nexport const initialCountry = convertCountry(countries[DEFAULT_COUNTRY]);\nexport const NATIONAL_COUNTRY_VALUE = initialCountry.value;\n\nexport const COUNTRIES = countries.all\n\t.filter(filterCountries)\n\t.map(convertCountry);\n\nexport default COUNTRIES;\n\nexport const COUNTRIES_OPTIONS = COUNTRIES.map((country) => ({\n\tlabel: country.name,\n\tvalue: country.value,\n\ticon: country.flag\n}));\n\nexport const PHONE_OPTIONS = COUNTRIES.map((country) => ({\n\tlabel: STRINGS.formatString(\n\t\tSTRINGS.USER_VERIFICATION.USER_DOCUMENTATION_FORM.FORM_FIELDS\n\t\t\t.PHONE_CODE_DISPLAY,\n\t\tcountry.phoneCode,\n\t\tcountry.name\n\t).join(''),\n\tvalue: country.phoneCode,\n\ticon: country.flag\n}));\n"]},"metadata":{},"sourceType":"module"}