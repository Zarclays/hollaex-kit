{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/projects/hollaex/src/components/Notification/NewOrder.js\";\nimport React from 'react';\nimport EventListener from 'react-event-listener';\nimport { connect } from 'react-redux';\nimport { ICONS, CURRENCY_PRICE_FORMAT, DEFAULT_COIN_DATA } from '../../config/constants';\nimport STRINGS from '../../config/localizedStrings';\nimport { NotificationWraper, NotificationContent, InformationRow } from './Notification';\nimport { Button } from '../';\nimport { formatToCurrency } from '../../utils/currency';\n\nvar generateRows = function generateRows(_ref, coins) {\n  var order = _ref.order,\n      pairData = _ref.pairData;\n  var type = order.type,\n      side = order.side,\n      price = order.price,\n      size = order.size,\n      orderFees = order.orderFees,\n      orderPrice = order.orderPrice;\n  var secondaryFormat = coins[pairData.pair_2] || DEFAULT_COIN_DATA;\n  var baseFormat = coins[pairData.pair_base] || DEFAULT_COIN_DATA;\n  var rows = [];\n  rows.push({\n    label: STRINGS.TYPE,\n    value: React.createElement(\"div\", {\n      className: \"text-capitalize\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, STRINGS.formatString(STRINGS.CHECK_ORDER_TYPE, STRINGS.TYPES_VALUES[type], STRINGS.SIDES_VALUES[side]))\n  });\n  rows.push({\n    label: STRINGS.SIZE,\n    value: STRINGS.formatString(CURRENCY_PRICE_FORMAT, formatToCurrency(size, baseFormat.min), baseFormat.symbol.toUpperCase())\n  });\n\n  if (type === 'limit') {\n    rows.push({\n      label: STRINGS.PRICE,\n      value: STRINGS.formatString(CURRENCY_PRICE_FORMAT, formatToCurrency(price, secondaryFormat.min), secondaryFormat.symbol.toUpperCase())\n    });\n  }\n\n  rows.push({\n    label: STRINGS.FEE,\n    value: STRINGS.formatString(CURRENCY_PRICE_FORMAT, formatToCurrency(orderFees, secondaryFormat.min), secondaryFormat.symbol.toUpperCase())\n  });\n  rows.push({\n    label: STRINGS.TOTAL_ORDER,\n    value: STRINGS.formatString(CURRENCY_PRICE_FORMAT, formatToCurrency(orderPrice, secondaryFormat.min), secondaryFormat.symbol.toUpperCase())\n  });\n  return rows;\n};\n\nvar OrderDisplay = function OrderDisplay(_ref2) {\n  var rows = _ref2.rows;\n  return React.createElement(NotificationContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, rows.map(function (row, index) {\n    return React.createElement(InformationRow, Object.assign({}, row, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }));\n};\n\nvar NewOrderNotification = function NewOrderNotification(_ref3) {\n  var type = _ref3.type,\n      data = _ref3.data,\n      coins = _ref3.coins,\n      onBack = _ref3.onBack,\n      onConfirm = _ref3.onConfirm;\n  var rows = generateRows(data, coins);\n\n  var onConfirmClick = function onConfirmClick() {\n    onConfirm();\n    onBack();\n  };\n\n  var onKeydown = function onKeydown(_ref4) {\n    var key = _ref4.key;\n\n    if (key === 'Enter') {\n      onConfirmClick();\n    }\n  };\n\n  return React.createElement(NotificationWraper, {\n    title: STRINGS.CHECK_ORDER,\n    icon: ICONS.CHECK_ORDER,\n    className: \"new-order-notification\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(EventListener, {\n    target: \"document\",\n    onKeydown: onKeydown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(OrderDisplay, {\n    rows: rows,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"d-flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Button, {\n    label: STRINGS.BACK_TEXT,\n    onClick: onBack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"separator\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(Button, {\n    label: STRINGS.CONFIRM_TEXT,\n    onClick: onConfirmClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    coins: state.app.coins\n  };\n};\n\nexport default connect(mapStateToProps)(NewOrderNotification);","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/components/Notification/NewOrder.js"],"names":["React","EventListener","connect","ICONS","CURRENCY_PRICE_FORMAT","DEFAULT_COIN_DATA","STRINGS","NotificationWraper","NotificationContent","InformationRow","Button","formatToCurrency","generateRows","coins","order","pairData","type","side","price","size","orderFees","orderPrice","secondaryFormat","pair_2","baseFormat","pair_base","rows","push","label","TYPE","value","formatString","CHECK_ORDER_TYPE","TYPES_VALUES","SIDES_VALUES","SIZE","min","symbol","toUpperCase","PRICE","FEE","TOTAL_ORDER","OrderDisplay","map","row","index","NewOrderNotification","data","onBack","onConfirm","onConfirmClick","onKeydown","key","CHECK_ORDER","BACK_TEXT","CONFIRM_TEXT","mapStateToProps","state","app"],"mappings":"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","sourcesContent":["import React from 'react';\nimport EventListener from 'react-event-listener';\nimport { connect } from 'react-redux';\nimport { ICONS, CURRENCY_PRICE_FORMAT, DEFAULT_COIN_DATA } from '../../config/constants';\nimport STRINGS from '../../config/localizedStrings';\nimport {\n\tNotificationWraper,\n\tNotificationContent,\n\tInformationRow\n} from './Notification';\nimport { Button } from '../';\nimport { formatToCurrency } from '../../utils/currency';\n\nconst generateRows = ({ order, pairData }, coins) => {\n\tconst { type, side, price, size, orderFees, orderPrice } = order;\n\tconst secondaryFormat = coins[pairData.pair_2] || DEFAULT_COIN_DATA;\n\tconst baseFormat = coins[pairData.pair_base] || DEFAULT_COIN_DATA;\n\tconst rows = [];\n\n\trows.push({\n\t\tlabel: STRINGS.TYPE,\n\t\tvalue: (\n\t\t\t<div className=\"text-capitalize\">\n\t\t\t\t{STRINGS.formatString(\n\t\t\t\t\tSTRINGS.CHECK_ORDER_TYPE,\n\t\t\t\t\tSTRINGS.TYPES_VALUES[type],\n\t\t\t\t\tSTRINGS.SIDES_VALUES[side]\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t});\n\n\trows.push({\n\t\tlabel: STRINGS.SIZE,\n\t\tvalue: STRINGS.formatString(\n\t\t\tCURRENCY_PRICE_FORMAT,\n\t\t\tformatToCurrency(size, baseFormat.min),\n\t\t\tbaseFormat.symbol.toUpperCase()\n\t\t)\n\t});\n\n\tif (type === 'limit') {\n\t\trows.push({\n\t\t\tlabel: STRINGS.PRICE,\n\t\t\tvalue: STRINGS.formatString(\n\t\t\t\tCURRENCY_PRICE_FORMAT,\n\t\t\t\tformatToCurrency(price, secondaryFormat.min),\n\t\t\t\tsecondaryFormat.symbol.toUpperCase()\n\t\t\t)\n\t\t});\n\t}\n\n\trows.push({\n\t\tlabel: STRINGS.FEE,\n\t\tvalue: STRINGS.formatString(\n\t\t\tCURRENCY_PRICE_FORMAT,\n\t\t\tformatToCurrency(orderFees, secondaryFormat.min),\n\t\t\tsecondaryFormat.symbol.toUpperCase()\n\t\t)\n\t});\n\n\trows.push({\n\t\tlabel: STRINGS.TOTAL_ORDER,\n\t\tvalue: STRINGS.formatString(\n\t\t\tCURRENCY_PRICE_FORMAT,\n\t\t\tformatToCurrency(orderPrice, secondaryFormat.min),\n\t\t\tsecondaryFormat.symbol.toUpperCase()\n\t\t)\n\t});\n\n\treturn rows;\n};\n\nconst OrderDisplay = ({ rows }) => {\n\treturn (\n\t\t<NotificationContent>\n\t\t\t{rows.map((row, index) => <InformationRow {...row} key={index} />)}\n\t\t</NotificationContent>\n\t);\n};\n\nconst NewOrderNotification = ({ type, data, coins, onBack, onConfirm }) => {\n\tconst rows = generateRows(data, coins);\n\tconst onConfirmClick = () => {\n\t\tonConfirm();\n\t\tonBack();\n\t};\n\n\tconst onKeydown = ({ key }) => {\n\t\tif (key === 'Enter') {\n\t\t\tonConfirmClick();\n\t\t}\n\t};\n\n\treturn (\n\t\t<NotificationWraper\n\t\t\ttitle={STRINGS.CHECK_ORDER}\n\t\t\ticon={ICONS.CHECK_ORDER}\n\t\t\tclassName=\"new-order-notification\"\n\t\t>\n\t\t\t<EventListener target=\"document\" onKeydown={onKeydown} />\n\t\t\t<OrderDisplay rows={rows} />\n\t\t\t<div className=\"d-flex\">\n\t\t\t\t<Button label={STRINGS.BACK_TEXT} onClick={onBack} />\n\t\t\t\t<div className=\"separator\" />\n\t\t\t\t<Button label={STRINGS.CONFIRM_TEXT} onClick={onConfirmClick} />\n\t\t\t</div>\n\t\t</NotificationWraper>\n\t);\n};\n\nconst mapStateToProps = (state) => ({\n\tcoins: state.app.coins\n});\n\nexport default connect(mapStateToProps)(NewOrderNotification);\n"]},"metadata":{},"sourceType":"module"}