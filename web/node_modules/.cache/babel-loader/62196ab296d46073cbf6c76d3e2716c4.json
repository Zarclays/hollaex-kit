{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/projects/hollaex/src/containers/Wallet/components/index.js\";\nimport React from 'react';\nimport { ActionNotification, IconTitle } from '../../../components';\nimport DumbField from '../../../components/Form/FormFields/DumbField';\nimport { generateWalletActionsText, formatToCurrency } from '../../../utils/currency';\nimport { ICONS, DEFAULT_COIN_DATA } from '../../../config/constants';\nimport STRINGS from '../../../config/localizedStrings';\nexport var renderDumbField = function renderDumbField(data) {\n  return React.createElement(DumbField, Object.assign({}, data, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }));\n};\nexport var renderBankInformation = function renderBankInformation(_ref) {\n  var bank_name = _ref.bank_name,\n      account_number = _ref.account_number,\n      account_owner = _ref.account_owner;\n  var fullWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var allowCopy = true;\n  var fields = [{\n    label: STRINGS.USER_VERIFICATION.BANK_ACCOUNT_FORM.FORM_FIELDS.BANK_NAME_LABEL,\n    value: bank_name,\n    key: 'bank_name',\n    allowCopy: allowCopy,\n    fullWidth: fullWidth\n  }, {\n    label: STRINGS.USER_VERIFICATION.BANK_ACCOUNT_FORM.FORM_FIELDS.ACCOUNT_OWNER_LABEL,\n    value: account_owner,\n    key: 'account_owner',\n    allowCopy: allowCopy,\n    fullWidth: fullWidth\n  }, {\n    label: STRINGS.USER_VERIFICATION.BANK_ACCOUNT_FORM.FORM_FIELDS.ACCOUNT_NUMBER_LABEL,\n    value: account_number,\n    key: 'account_number',\n    allowCopy: allowCopy,\n    fullWidth: fullWidth\n  }];\n  return React.createElement(\"div\", {\n    className: \"bank_account-data-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, fields.map(function (field) {\n    return renderDumbField(field);\n  }));\n};\nexport var renderTitle = function renderTitle(symbol) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'withdraw';\n  var coins = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _generateWalletAction = generateWalletActionsText(symbol, coins, true),\n      withdrawText = _generateWalletAction.withdrawText,\n      depositText = _generateWalletAction.depositText;\n\n  return React.createElement(\"div\", {\n    className: \"title text-capitalize\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, type === 'withdraw' ? withdrawText : depositText);\n};\nexport var renderAvailableBalanceText = function renderAvailableBalanceText(currency, balance, coins) {\n  var _ref2 = coins[currency] || DEFAULT_COIN_DATA,\n      fullname = _ref2.fullname,\n      min = _ref2.min,\n      _ref2$symbol = _ref2.symbol,\n      symbol = _ref2$symbol === void 0 ? '' : _ref2$symbol;\n\n  var shortName = symbol ? symbol.toUpperCase() : '';\n  var available = formatToCurrency(balance[\"\".concat(currency, \"_available\")], min);\n  return React.createElement(\"div\", {\n    className: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, STRINGS.formatString(STRINGS.AVAILABLE_BALANCE_TEXT, fullname, available, shortName)));\n};\nexport var renderNeedHelpAction = function renderNeedHelpAction(openContactForm) {\n  return React.createElement(ActionNotification, {\n    text: STRINGS.NEED_HELP_TEXT,\n    status: \"information\",\n    iconPath: ICONS.BLUE_QUESTION,\n    onClick: openContactForm,\n    className: \"need-help\",\n    useSvg: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  });\n};\nexport var renderInformation = function renderInformation(symbol, balance, openContactForm, generateBaseInformation, coins) {\n  var type = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'withdraw';\n  return React.createElement(\"div\", {\n    className: \"information_block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"information_block-text_wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, renderTitle(symbol, type, coins), renderAvailableBalanceText(symbol, balance, coins)), openContactForm && renderNeedHelpAction(openContactForm));\n};\nexport var renderTitleSection = function renderTitleSection(symbol, type, icon, coins) {\n  var _generateWalletAction2 = generateWalletActionsText(symbol, coins),\n      withdrawText = _generateWalletAction2.withdrawText,\n      depositText = _generateWalletAction2.depositText;\n\n  var text = type === 'withdraw' ? withdrawText : depositText;\n  return React.createElement(IconTitle, {\n    text: text,\n    iconPath: icon,\n    textType: \"title\",\n    useSvg: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/containers/Wallet/components/index.js"],"names":["React","ActionNotification","IconTitle","DumbField","generateWalletActionsText","formatToCurrency","ICONS","DEFAULT_COIN_DATA","STRINGS","renderDumbField","data","renderBankInformation","bank_name","account_number","account_owner","fullWidth","allowCopy","fields","label","USER_VERIFICATION","BANK_ACCOUNT_FORM","FORM_FIELDS","BANK_NAME_LABEL","value","key","ACCOUNT_OWNER_LABEL","ACCOUNT_NUMBER_LABEL","map","field","renderTitle","symbol","type","coins","withdrawText","depositText","renderAvailableBalanceText","currency","balance","fullname","min","shortName","toUpperCase","available","formatString","AVAILABLE_BALANCE_TEXT","renderNeedHelpAction","openContactForm","NEED_HELP_TEXT","BLUE_QUESTION","renderInformation","generateBaseInformation","renderTitleSection","icon","text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ActionNotification, IconTitle } from '../../../components';\nimport DumbField from '../../../components/Form/FormFields/DumbField';\nimport { generateWalletActionsText, formatToCurrency } from '../../../utils/currency';\nimport { ICONS, DEFAULT_COIN_DATA } from '../../../config/constants';\nimport STRINGS from '../../../config/localizedStrings';\n\nexport const renderDumbField = (data) => <DumbField {...data} />;\n\nexport const renderBankInformation = (\n\t{ bank_name, account_number, account_owner },\n\tfullWidth = false\n) => {\n\tconst allowCopy = true;\n\tconst fields = [\n\t\t{\n\t\t\tlabel:\n\t\t\t\tSTRINGS.USER_VERIFICATION.BANK_ACCOUNT_FORM.FORM_FIELDS.BANK_NAME_LABEL,\n\t\t\tvalue: bank_name,\n\t\t\tkey: 'bank_name',\n\t\t\tallowCopy,\n\t\t\tfullWidth\n\t\t},\n\t\t{\n\t\t\tlabel:\n\t\t\t\tSTRINGS.USER_VERIFICATION.BANK_ACCOUNT_FORM.FORM_FIELDS\n\t\t\t\t\t.ACCOUNT_OWNER_LABEL,\n\t\t\tvalue: account_owner,\n\t\t\tkey: 'account_owner',\n\t\t\tallowCopy,\n\t\t\tfullWidth\n\t\t},\n\t\t{\n\t\t\tlabel:\n\t\t\t\tSTRINGS.USER_VERIFICATION.BANK_ACCOUNT_FORM.FORM_FIELDS\n\t\t\t\t\t.ACCOUNT_NUMBER_LABEL,\n\t\t\tvalue: account_number,\n\t\t\tkey: 'account_number',\n\t\t\tallowCopy,\n\t\t\tfullWidth\n\t\t}\n\t];\n\n\treturn (\n\t\t<div className=\"bank_account-data-wrapper\">\n\t\t\t{fields.map((field) => renderDumbField(field))}\n\t\t</div>\n\t);\n};\n\nexport const renderTitle = (symbol, type = 'withdraw', coins) => {\n\tconst { withdrawText, depositText } = generateWalletActionsText(symbol, coins, true);\n\treturn (\n\t\t<div className=\"title text-capitalize\">\n\t\t\t{type === 'withdraw' ? withdrawText : depositText}\n\t\t</div>\n\t);\n};\n\nexport const renderAvailableBalanceText = (currency, balance, coins) => {\n\tconst { fullname, min, symbol = '' } = coins[currency] || DEFAULT_COIN_DATA;\n\tconst shortName = symbol ? symbol.toUpperCase() : '';\n\tconst available = formatToCurrency(balance[`${currency}_available`], min);\n\n\treturn (\n\t\t<div className=\"text\">\n\t\t\t<p>\n\t\t\t\t{STRINGS.formatString(\n\t\t\t\t\tSTRINGS.AVAILABLE_BALANCE_TEXT,\n\t\t\t\t\tfullname,\n\t\t\t\t\tavailable,\n\t\t\t\t\tshortName\n\t\t\t\t)}\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n\nexport const renderNeedHelpAction = (openContactForm) => (\n\t<ActionNotification\n\t\ttext={STRINGS.NEED_HELP_TEXT}\n\t\tstatus=\"information\"\n\t\ticonPath={ICONS.BLUE_QUESTION}\n\t\tonClick={openContactForm}\n\t\tclassName=\"need-help\"\n\t\tuseSvg={true}\n\t/>\n);\n\nexport const renderInformation = (\n\tsymbol,\n\tbalance,\n\topenContactForm,\n\tgenerateBaseInformation,\n\tcoins,\n\ttype = 'withdraw'\n) => {\n\treturn (\n\t\t<div className=\"information_block\">\n\t\t\t<div className=\"information_block-text_wrapper\">\n\t\t\t\t{renderTitle(symbol, type, coins)}\n\t\t\t\t{renderAvailableBalanceText(symbol, balance, coins)}\n\t\t\t</div>\n\t\t\t{openContactForm && renderNeedHelpAction(openContactForm)}\n\t\t</div>\n\t);\n};\n\nexport const renderTitleSection = (symbol, type, icon, coins) => {\n\tconst { withdrawText, depositText } = generateWalletActionsText(symbol, coins);\n\tconst text = type === 'withdraw' ? withdrawText : depositText;\n\n\treturn <IconTitle text={text} iconPath={icon} textType=\"title\" useSvg={true} />;\n};\n"]},"metadata":{},"sourceType":"module"}