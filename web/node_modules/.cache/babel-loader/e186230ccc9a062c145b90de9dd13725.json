{"ast":null,"code":"import _toConsumableArray from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/Documents/projects/hollaex/src/components/Form/FormFields/ToggleField.js\";\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { FieldContent } from './FieldWrapper';\nimport STRINGS from '../../../config/localizedStrings';\nimport { FLEX_CENTER_CLASSES } from '../../../config/constants';\n\nvar ToggleField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ToggleField, _Component);\n\n  function ToggleField() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ToggleField);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToggleField)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selected: _this.props.options[0] && _this.props.options[0].value ? _this.props.options[0].value : ''\n    };\n\n    _this.onToogle = function () {\n      var _this$props = _this.props,\n          options = _this$props.options,\n          input = _this$props.input;\n      var selected = _this.state.selected === options[0].value ? options[1].value : options[0].value;\n      input.onChange(selected);\n\n      _this.setState({\n        selected: selected\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ToggleField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var input = this.props.input;\n\n      if (input && (input.value || input.value === false)) {\n        this.setState({\n          selected: input.value\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.input.value !== nextProps.input.value && (nextProps.input.value || nextProps.input.value === false)) {\n        this.setState({\n          selected: nextProps.input.value\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          options = _this$props2.options,\n          label = _this$props2.label,\n          className = _this$props2.className,\n          _this$props2$meta = _this$props2.meta,\n          meta = _this$props2$meta === void 0 ? {\n        active: false,\n        error: '',\n        touched: false,\n        invalid: false\n      } : _this$props2$meta,\n          toggleOnly = _this$props2.toggleOnly,\n          rest = _objectWithoutProperties(_this$props2, [\"options\", \"label\", \"className\", \"meta\", \"toggleOnly\"]);\n\n      var selected = this.state.selected;\n      return React.createElement(\"div\", {\n        className: classnames(\"py-2\", className),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, toggleOnly ? React.createElement(Toggle, {\n        selected: selected,\n        options: options,\n        onToogle: this.onToogle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }) : React.createElement(FieldContent, Object.assign({\n        hideUnderline: true,\n        meta: meta,\n        valid: !meta.invalid\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"d-flex justify-content-between\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, label), React.createElement(Toggle, {\n        selected: selected,\n        options: options,\n        onToogle: this.onToogle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ToggleField;\n}(Component);\n\nvar Toggle = function Toggle(_ref) {\n  var options = _ref.options,\n      selected = _ref.selected,\n      onToogle = _ref.onToogle;\n  return React.createElement(\"div\", {\n    className: classnames('toggle_button-wrapper', 'd-flex'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classnames.apply(void 0, ['toggle-content', 'f-0'].concat(_toConsumableArray(FLEX_CENTER_CLASSES), ['direction_ltr'])),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classnames({\n      selected: options[1].value === selected\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, options[1].label), React.createElement(\"div\", {\n    onClick: onToogle,\n    className: classnames('toggle-action_button', {\n      left: options[1].value === selected,\n      right: options[0].value === selected\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"toggle-action_button-display\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classnames({\n      selected: options[0].value === selected\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, options[0].label)));\n};\n\nToggleField.defaultProps = {\n  options: STRINGS.DEFAULT_TOGGLE_OPTIONS,\n  onChange: function onChange() {},\n  toggleOnly: false\n};\nexport default ToggleField;","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/components/Form/FormFields/ToggleField.js"],"names":["React","Component","classnames","FieldContent","STRINGS","FLEX_CENTER_CLASSES","ToggleField","state","selected","props","options","value","onToogle","input","onChange","setState","nextProps","label","className","meta","active","error","touched","invalid","toggleOnly","rest","Toggle","left","right","defaultProps","DEFAULT_TOGGLE_OPTIONS"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { FieldContent } from './FieldWrapper';\n\nimport STRINGS from '../../../config/localizedStrings';\nimport { FLEX_CENTER_CLASSES } from '../../../config/constants';\n\nclass ToggleField extends Component {\n    state = {\n        selected: this.props.options[0] && this.props.options[0].value ? this.props.options[0].value : ''\n    }\n\n    componentDidMount() {\n        const { input } = this.props;\n        if (input && (input.value || input.value === false)) {\n            this.setState({ selected: input.value });\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.input.value !== nextProps.input.value\n            && (nextProps.input.value || nextProps.input.value === false)) {\n            this.setState({ selected: nextProps.input.value });\n        }\n    }\n\n    onToogle = () => {\n        const { options, input } = this.props;\n        const selected =\n            this.state.selected === options[0].value ? options[1].value : options[0].value;\n        input.onChange(selected);\n        this.setState({ selected });\n    };\n\n    render() {\n        const {\n            options,\n            label,\n            className,\n            meta = { active: false, error: '', touched: false, invalid: false },\n            toggleOnly,\n            ...rest\n        } = this.props;\n        const { selected } = this.state;\n        return (\n            <div className={classnames(\"py-2\", className)}>\n                {toggleOnly \n                    ? <Toggle selected={selected} options={options} onToogle={this.onToogle}  />\n                    : <FieldContent\n                        hideUnderline={true}\n                        meta={meta}\n                        valid={!meta.invalid}\n                        {...rest}>\n                        <div className=\"d-flex justify-content-between\">\n                            <div>\n                                {label}\n                            </div>\n                            <Toggle selected={selected} options={options} onToogle={this.onToogle}  />\n                        </div>\n                    </FieldContent>\n                }\n            </div>\n        );\n    }\n}\n\nconst Toggle = ({ options, selected, onToogle }) => (\n    <div className={classnames('toggle_button-wrapper', 'd-flex')}>\n        <div\n            className={classnames(\n                'toggle-content',\n                'f-0',\n                ...FLEX_CENTER_CLASSES,\n                'direction_ltr'\n            )}\n        >\n\n            <div className={classnames({ selected: options[1].value === selected })}>\n                {options[1].label}\n            </div>\n            <div\n                onClick={onToogle}\n                className={classnames('toggle-action_button', {\n                    left: options[1].value === selected,\n                    right: options[0].value === selected\n                })}\n            >\n                <div className=\"toggle-action_button-display\" />\n            </div>\n            <div className={classnames({ selected: options[0].value === selected })}>\n                {options[0].label}\n            </div>\n        </div>\n    </div>\n);\n\nToggleField.defaultProps = {\n    options: STRINGS.DEFAULT_TOGGLE_OPTIONS,\n    onChange: () => {},\n    toggleOnly: false\n};\nexport default ToggleField;"]},"metadata":{},"sourceType":"module"}