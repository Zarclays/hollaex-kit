{"ast":null,"code":"import PhoneNumber from 'awesome-phonenumber';\nimport { initialCountry, COUNTRIES } from '../../utils/countries';\nexport var mobileInitialValues = function mobileInitialValues(_ref) {\n  var country = _ref.country;\n  return {\n    phone_country: getCountry(country).phoneCode\n  };\n};\nexport var identityInitialValues = function identityInitialValues(_ref2) {\n  var full_name = _ref2.full_name,\n      gender = _ref2.gender,\n      nationality = _ref2.nationality,\n      dob = _ref2.dob,\n      address = _ref2.address,\n      userData = _ref2.userData;\n  var initialValues = {\n    full_name: full_name || userData.full_name,\n    country: initialCountry.value,\n    nationality: initialCountry.value\n  };\n\n  if (nationality) {\n    initialValues.nationality = getCountry(nationality).value;\n  }\n\n  if (gender || gender === false) {\n    initialValues.gender = gender;\n  } else if (userData.gender || userData.gender === false) {\n    initialValues.gender = userData.gender;\n  }\n\n  if (dob) {\n    initialValues.dob = dob;\n  } else if (userData.dob) {\n    initialValues.dob = userData.dob;\n  }\n\n  if (address.city) {\n    initialValues.country = getCountry(address.country).value;\n    initialValues.city = address.city;\n    initialValues.address = address.address;\n    initialValues.postal_code = address.postal_code;\n  }\n\n  return initialValues;\n};\nexport var documentInitialValues = function documentInitialValues(_ref3) {\n  var nationality = _ref3.nationality,\n      _ref3$id_data = _ref3.id_data,\n      id_data = _ref3$id_data === void 0 ? {} : _ref3$id_data;\n  var type = id_data.type,\n      number = id_data.number,\n      issued_date = id_data.issued_date,\n      expiration_date = id_data.expiration_date;\n  var initialValues = {};\n  if (type) initialValues.type = type;else if (nationality === 'IR') initialValues.type = 'id';else initialValues.type = 'passport';\n  if (number) initialValues.number = number;\n  if (issued_date) initialValues.issued_date = issued_date;\n  if (expiration_date) initialValues.expiration_date = expiration_date;\n  return initialValues;\n};\nexport var getCountry = function getCountry(country) {\n  var filterValue = COUNTRIES.filter(function (data) {\n    return data.value === country;\n  });\n  if (filterValue.length) return filterValue[0];\n  return initialCountry;\n};\nexport var getCountryFromNumber = function getCountryFromNumber() {\n  var phone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var number = PhoneNumber(phone);\n  var phoneCode = \"+\".concat(PhoneNumber.getCountryCodeForRegionCode(number.getRegionCode()));\n  var filterValue = COUNTRIES.filter(function (data) {\n    return data.phoneCode === phoneCode;\n  });\n  if (filterValue.length) return filterValue[0];\n  return initialCountry;\n};","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/containers/Verification/utils.js"],"names":["PhoneNumber","initialCountry","COUNTRIES","mobileInitialValues","country","phone_country","getCountry","phoneCode","identityInitialValues","full_name","gender","nationality","dob","address","userData","initialValues","value","city","postal_code","documentInitialValues","id_data","type","number","issued_date","expiration_date","filterValue","filter","data","length","getCountryFromNumber","phone","getCountryCodeForRegionCode","getRegionCode"],"mappings":"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","sourcesContent":["import PhoneNumber from 'awesome-phonenumber';\n\nimport { initialCountry, COUNTRIES } from '../../utils/countries';\n\nexport const mobileInitialValues = ({ country }) => {\n\treturn { phone_country: getCountry(country).phoneCode };\n};\n\nexport const identityInitialValues = ({ full_name, gender, nationality, dob, address, userData }) => {\n\tconst initialValues = {\n\t\tfull_name: full_name || userData.full_name,\n\t\tcountry: initialCountry.value,\n\t\tnationality: initialCountry.value\n\t};\n\tif (nationality) {\n\t\tinitialValues.nationality = getCountry(nationality).value;\n\t}\n\tif (gender || gender === false) {\n\t\tinitialValues.gender = gender;\n\t} else if (userData.gender || userData.gender === false) {\n\t\tinitialValues.gender = userData.gender;\n\t}\n\tif (dob) {\n\t\tinitialValues.dob = dob;\n\t} else if (userData.dob) {\n\t\tinitialValues.dob = userData.dob;\n\t}\n\tif (address.city) {\n\t\tinitialValues.country = getCountry(address.country).value;\n\t\tinitialValues.city = address.city;\n\t\tinitialValues.address = address.address;\n\t\tinitialValues.postal_code = address.postal_code;\n\t}\n\n\treturn initialValues;\n};\n\nexport const documentInitialValues = ({ nationality, id_data = {} }) => {\n\tconst { type, number, issued_date, expiration_date } = id_data;\n\tconst initialValues = {};\n\tif (type)\n\t\tinitialValues.type = type;\n\telse if (nationality === 'IR')\n\t\tinitialValues.type = 'id';\n\telse\n\t\tinitialValues.type = 'passport';\n\n\tif (number)\n\t\tinitialValues.number = number;\n\tif (issued_date)\n\t\tinitialValues.issued_date = issued_date;\n\tif (expiration_date)\n\t\tinitialValues.expiration_date = expiration_date;\n\n\treturn initialValues;\n};\n\nexport const getCountry = country => {\n\tconst filterValue = COUNTRIES.filter(data => data.value === country);\n\tif (filterValue.length) return filterValue[0];\n\treturn initialCountry;\n};\n\nexport const getCountryFromNumber = (phone = '') => {\n\tconst number = PhoneNumber(phone);\n\tconst phoneCode = `+${PhoneNumber.getCountryCodeForRegionCode(\n\t\tnumber.getRegionCode()\n\t)}`;\n\tconst filterValue = COUNTRIES.filter(data => data.phoneCode === phoneCode);\n\tif (filterValue.length) return filterValue[0];\n\treturn initialCountry;\n};\n"]},"metadata":{},"sourceType":"module"}