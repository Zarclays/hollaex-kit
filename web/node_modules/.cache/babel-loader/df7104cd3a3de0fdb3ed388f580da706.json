{"ast":null,"code":"import _classCallCheck from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/Documents/projects/hollaex/src/components/Dialog/DesktopDialog.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Modal from 'react-modal';\nimport Ionicon from 'react-ionicons';\nimport { Button, ActionNotification } from '../';\nimport STRINGS from '../../config/localizedStrings';\nimport { getClasesForLanguage, getLanguage } from '../../utils/string';\nimport { getThemeClass } from '../../utils/theme';\n\nvar Dialog =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Dialog, _PureComponent);\n\n  function Dialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onRequestClose = function (e) {\n      if (_this.props.onCloseDialog) {\n        _this.props.onCloseDialog(e);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"render\",\n    value: function render() {\n      var languageClasses = getClasesForLanguage(getLanguage());\n      var _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          children = _this$props.children,\n          label = _this$props.label,\n          closeButton = _this$props.closeButton,\n          shouldCloseOnOverlayClick = _this$props.shouldCloseOnOverlayClick,\n          showCloseText = _this$props.showCloseText,\n          dialogId = _this$props.dialogId,\n          theme = _this$props.theme,\n          className = _this$props.className;\n      return React.createElement(Modal, {\n        id: dialogId,\n        isOpen: isOpen,\n        contentLabel: label,\n        onRequestClose: this.onRequestClose,\n        shouldCloseOnOverlayClick: shouldCloseOnOverlayClick,\n        portalClassName: classnames(className, languageClasses, getThemeClass(theme)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, showCloseText && !closeButton && React.createElement(ActionNotification, {\n        text: React.createElement(Ionicon, {\n          icon: \"md-close\",\n          fontSize: \"24px\",\n          className: \"action_notification-image\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }),\n        onClick: this.onRequestClose,\n        className: \"close-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), children, closeButton && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: closeButton,\n        label: STRINGS.CLOSE_TEXT,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Dialog;\n}(PureComponent);\n\nDialog.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  closeButton: PropTypes.func,\n  onCloseDialog: PropTypes.func,\n  children: PropTypes.node.isRequired\n};\nModal.setAppElement('#root');\nDialog.defaultProps = {\n  shouldCloseOnOverlayClick: true,\n  showCloseText: true,\n  theme: '',\n  className: ''\n};\nexport default Dialog;","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/components/Dialog/DesktopDialog.js"],"names":["React","PureComponent","PropTypes","classnames","Modal","Ionicon","Button","ActionNotification","STRINGS","getClasesForLanguage","getLanguage","getThemeClass","Dialog","onRequestClose","e","props","onCloseDialog","languageClasses","isOpen","children","label","closeButton","shouldCloseOnOverlayClick","showCloseText","dialogId","theme","className","CLOSE_TEXT","propTypes","bool","isRequired","string","func","node","setAppElement","defaultProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Modal from 'react-modal';\nimport Ionicon from 'react-ionicons';\nimport { Button, ActionNotification } from '../';\nimport STRINGS from '../../config/localizedStrings';\nimport { getClasesForLanguage, getLanguage } from '../../utils/string';\nimport { getThemeClass } from '../../utils/theme';\n\nclass Dialog extends PureComponent {\n\tstatic propTypes = {\n\t\tisOpen: PropTypes.bool.isRequired,\n\t\tlabel: PropTypes.string.isRequired,\n\t\tcloseButton: PropTypes.func,\n\t\tonCloseDialog: PropTypes.func,\n\t\tchildren: PropTypes.node.isRequired\n\t};\n\n\tonRequestClose = (e) => {\n\t\tif (this.props.onCloseDialog) {\n\t\t\tthis.props.onCloseDialog(e);\n\t\t}\n\t};\n\n\trender() {\n\t\tconst languageClasses = getClasesForLanguage(getLanguage());\n\t\tconst {\n\t\t\tisOpen,\n\t\t\tchildren,\n\t\t\tlabel,\n\t\t\tcloseButton,\n\t\t\tshouldCloseOnOverlayClick,\n\t\t\tshowCloseText,\n\t\t\tdialogId,\n\t\t\ttheme,\n\t\t\tclassName\n\t\t} = this.props;\n\t\t\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\tid={dialogId}\n\t\t\t\tisOpen={isOpen}\n\t\t\t\tcontentLabel={label}\n\t\t\t\tonRequestClose={this.onRequestClose}\n\t\t\t\tshouldCloseOnOverlayClick={shouldCloseOnOverlayClick}\n\t\t\t\tportalClassName={classnames(className, languageClasses, getThemeClass(theme))}\n\t\t\t>\n\t\t\t\t{showCloseText &&\n\t\t\t\t\t!closeButton && (\n\t\t\t\t\t\t<ActionNotification\n\t\t\t\t\t\t\ttext={\n\t\t\t\t\t\t\t\t<Ionicon\n\t\t\t\t\t\t\t\t\ticon=\"md-close\"\n\t\t\t\t\t\t\t\t\tfontSize=\"24px\"\n\t\t\t\t\t\t\t\t\tclassName=\"action_notification-image\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonClick={this.onRequestClose}\n\t\t\t\t\t\t\tclassName=\"close-button\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t{children}\n\t\t\t\t{closeButton && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button onClick={closeButton} label={STRINGS.CLOSE_TEXT} />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Modal>\n\t\t);\n\t}\n}\n\nModal.setAppElement('#root');\n\nDialog.defaultProps = {\n\tshouldCloseOnOverlayClick: true,\n\tshowCloseText: true,\n\ttheme: '',\n\tclassName: ''\n};\n\nexport default Dialog;\n"]},"metadata":{},"sourceType":"module"}