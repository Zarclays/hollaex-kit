{"ast":null,"code":"import _objectSpread from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/Documents/projects/hollaex/src/containers/Chat/index.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { isMobile } from 'react-device-detect';\nimport { ChatWrapper } from '../../components';\nimport { WS_URL } from '../../config/constants';\nimport { setAnnouncements, setChatUnreadMessages, USER_TYPES, MESSAGE_TYPES } from '../../actions/appActions';\nimport { getToken, isLoggedIn } from '../../utils/token';\nvar ENTER_KEY = 'Enter';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chat, _Component);\n\n  function Chat() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chat)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      chatWs: null,\n      chatSocketInitialized: false,\n      chatSocketInitializing: false,\n      to: '',\n      messages: []\n    };\n\n    _this.initializeChatWs = function () {\n      var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      _this.isInitializing(true);\n\n      var chatWs = io.connect(\"\".concat(WS_URL, \"/chat\"), {\n        query: {\n          token: token ? \"Bearer \".concat(token) : ''\n        }\n      });\n\n      _this.setState({\n        chatWs: chatWs\n      });\n\n      chatWs.on('init', function (_ref) {\n        var _ref$messages = _ref.messages,\n            messages = _ref$messages === void 0 ? [] : _ref$messages,\n            _ref$announcements = _ref.announcements,\n            announcements = _ref$announcements === void 0 ? [] : _ref$announcements;\n\n        _this.setState({\n          chatSocketInitializing: false,\n          messages: messages\n        });\n\n        setTimeout(function () {\n          _this.setState({\n            chatSocketInitialized: true\n          });\n        }, 1000);\n\n        _this.props.setAnnouncements(announcements);\n      });\n      chatWs.on('error', function (error) {\n        _this.isInitializing(false);\n      });\n      chatWs.on('message', function (message) {\n        var newMessage = _objectSpread({}, message);\n\n        if (typeof message.username === 'object') {\n          newMessage = _objectSpread({}, message, message.username);\n        }\n\n        var messages = _this.state.messages.concat(newMessage);\n\n        var unreadMessages = _this.props.minimized ? _this.props.unreadMessages + (messages.length - _this.state.messages.length) : 0;\n\n        _this.props.setChatUnreadMessages(unreadMessages);\n\n        _this.setState({\n          messages: messages\n        });\n      });\n      chatWs.on('announcement', function (announcement) {\n        _this.props.setAnnouncements(announcement);\n      });\n      chatWs.on('deleteMessage', function (idToDelete) {\n        var indexOfMessage = _this.state.messages.findIndex(function (_ref2) {\n          var id = _ref2.id;\n          return id === idToDelete;\n        });\n\n        if (indexOfMessage > -1) {\n          var messages = [].concat(_this.state.messages);\n          messages.splice(indexOfMessage, 1);\n\n          _this.setState({\n            messages: messages\n          });\n        }\n      });\n    };\n\n    _this.closeChatSocket = function () {\n      if (_this.state.chatWs) {\n        _this.state.chatWs.close();\n      }\n    };\n\n    _this.setChatBoxRef = function (ref) {\n      if (ref && ref.el) {\n        _this.chatMessageBox = ref.el;\n      }\n    };\n\n    _this.sendMessage = function (e) {\n      if (e.key === ENTER_KEY) {\n        e.preventDefault();\n        var message = _this.chatMessageBox.value;\n\n        if (message.trim().length > 0) {\n          var username = _this.props.username;\n          var to = _this.state.to;\n          var chatMessage = {\n            username: username,\n            userType: USER_TYPES.USER_TYPE_NORMAL,\n            to: to,\n            message: message,\n            type: MESSAGE_TYPES.MESSAGE_TYPE_NORMAL\n          };\n\n          _this.state.chatWs.emit('message', chatMessage);\n\n          _this.chatMessageBox.value = '';\n          _this.chatMessageBox.style.height = isMobile ? '32px' : '36px';\n        }\n      }\n    };\n\n    _this.isInitializing = function (condition) {\n      _this.setState({\n        chatSocketInitializing: condition\n      });\n    };\n\n    _this.resetUnreadMessages = function () {\n      _this.setState({\n        unreadMessages: 0\n      });\n    };\n\n    _this.removeMessage = function (id) {\n      _this.state.chatWs.emit('deleteMessage', id);\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (!this.props.fetchingAuth && isLoggedIn()) {\n        this.initializeChatWs(getToken());\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (!nextProps.fetchingAuth && nextProps.fetchingAuth !== this.props.fetchingAuth) {\n        if (!this.state.chatWs && isLoggedIn()) {\n          this.initializeChatWs(getToken());\n        }\n      }\n\n      if (nextProps.username_set) {\n        this.state.chatWs.emit('changeUsername');\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.closeChatSocket();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          username = _this$props.username,\n          userType = _this$props.userType,\n          userInitialized = _this$props.userInitialized,\n          onMinimize = _this$props.onMinimize,\n          minimized = _this$props.minimized,\n          chatIsClosed = _this$props.chatIsClosed,\n          set_username = _this$props.set_username;\n      var _this$state = this.state,\n          messages = _this$state.messages,\n          chatSocketInitialized = _this$state.chatSocketInitialized,\n          chatSocketInitializing = _this$state.chatSocketInitializing,\n          unreadMessages = _this$state.unreadMessages;\n      return React.createElement(ChatWrapper, {\n        chatSocketInitializing: chatSocketInitializing,\n        chatSocketInitialized: chatSocketInitialized,\n        title: \"Chat\",\n        username: username,\n        userType: userType,\n        messages: messages,\n        unreadMessages: unreadMessages,\n        setChatBoxRef: this.setChatBoxRef,\n        sendMessage: this.sendMessage,\n        userInitialized: userInitialized,\n        minimized: minimized || !userInitialized || !chatSocketInitialized,\n        minimizeChat: onMinimize,\n        chatIsClosed: chatIsClosed,\n        set_username: set_username,\n        removeMessage: this.removeMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Chat;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    fetchingAuth: store.auth.fetching,\n    username: store.user.username,\n    username_set: store.user.username_set,\n    userType: store.auth.userType,\n    userInitialized: store.user.fetched,\n    unreadMessages: store.app.chatUnreadMessages,\n    set_username: store.user.settings.chat.set_username\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setAnnouncements: bindActionCreators(setAnnouncements, dispatch),\n    setChatUnreadMessages: bindActionCreators(setChatUnreadMessages, dispatch),\n    dispatch: dispatch\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/containers/Chat/index.js"],"names":["React","Component","io","connect","bindActionCreators","isMobile","ChatWrapper","WS_URL","setAnnouncements","setChatUnreadMessages","USER_TYPES","MESSAGE_TYPES","getToken","isLoggedIn","ENTER_KEY","Chat","state","chatWs","chatSocketInitialized","chatSocketInitializing","to","messages","initializeChatWs","token","isInitializing","query","setState","on","announcements","setTimeout","props","error","message","newMessage","username","concat","unreadMessages","minimized","length","announcement","idToDelete","indexOfMessage","findIndex","id","splice","closeChatSocket","close","setChatBoxRef","ref","el","chatMessageBox","sendMessage","e","key","preventDefault","value","trim","chatMessage","userType","USER_TYPE_NORMAL","type","MESSAGE_TYPE_NORMAL","emit","style","height","condition","resetUnreadMessages","removeMessage","fetchingAuth","nextProps","username_set","userInitialized","onMinimize","chatIsClosed","set_username","mapStateToProps","store","auth","fetching","user","fetched","app","chatUnreadMessages","settings","chat","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { isMobile } from 'react-device-detect';\nimport { ChatWrapper } from '../../components';\nimport { WS_URL } from '../../config/constants';\nimport {\n\tsetAnnouncements,\n\tsetChatUnreadMessages,\n\tUSER_TYPES,\n\tMESSAGE_TYPES\n} from '../../actions/appActions';\nimport { getToken, isLoggedIn } from '../../utils/token';\n\nconst ENTER_KEY = 'Enter';\n\nclass Chat extends Component {\n\tstate = {\n\t\tchatWs: null,\n\t\tchatSocketInitialized: false,\n\t\tchatSocketInitializing: false,\n\t\tto: '',\n\t\tmessages: []\n\t};\n\n\tcomponentWillMount() {\n\t\tif (!this.props.fetchingAuth && isLoggedIn()) {\n\t\t\tthis.initializeChatWs(getToken());\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tif (\n\t\t\t!nextProps.fetchingAuth &&\n\t\t\tnextProps.fetchingAuth !== this.props.fetchingAuth\n\t\t) {\n\t\t\tif (!this.state.chatWs && isLoggedIn()) {\n\t\t\t\tthis.initializeChatWs(getToken());\n\t\t\t}\n\t\t}\n\t\tif (nextProps.username_set) {\n\t\t\tthis.state.chatWs.emit('changeUsername');\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.closeChatSocket();\n\t}\n\n\tinitializeChatWs = (token = '') => {\n\t\tthis.isInitializing(true);\n\t\tconst chatWs = io.connect(`${WS_URL}/chat`, {\n\t\t\tquery: {\n\t\t\t\ttoken: token ? `Bearer ${token}` : ''\n\t\t\t}\n\t\t});\n\n\t\tthis.setState({ chatWs });\n\n\t\tchatWs.on('init', ({ messages = [], announcements = [] }) => {\n\t\t\tthis.setState({\n\t\t\t\tchatSocketInitializing: false,\n\t\t\t\tmessages: messages\n\t\t\t});\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tchatSocketInitialized: true\n\t\t\t\t});\n\t\t\t}, 1000);\n\t\t\tthis.props.setAnnouncements(announcements);\n\t\t});\n\n\t\tchatWs.on('error', (error) => {\n\t\t\tthis.isInitializing(false);\n\t\t});\n\n\t\tchatWs.on('message', (message) => {\n\t\t\tlet newMessage = { ...message };\n\t\t\tif (typeof message.username === 'object') {\n\t\t\t\tnewMessage = { ...message, ...message.username };\n\t\t\t}\n\t\t\tconst messages = this.state.messages.concat(newMessage);\n\t\t\tconst unreadMessages = this.props.minimized\n\t\t\t\t? this.props.unreadMessages +\n\t\t\t\t  (messages.length - this.state.messages.length)\n\t\t\t\t: 0;\n\t\t\tthis.props.setChatUnreadMessages(unreadMessages);\n\t\t\tthis.setState({ messages });\n\t\t});\n\n\t\tchatWs.on('announcement', (announcement) => {\n\t\t\tthis.props.setAnnouncements(announcement);\n\t\t});\n\n\t\tchatWs.on('deleteMessage', (idToDelete) => {\n\t\t\tconst indexOfMessage = this.state.messages.findIndex(\n\t\t\t\t({ id }) => id === idToDelete\n\t\t\t);\n\t\t\tif (indexOfMessage > -1) {\n\t\t\t\tconst messages = [].concat(this.state.messages);\n\t\t\t\tmessages.splice(indexOfMessage, 1);\n\t\t\t\tthis.setState({ messages });\n\t\t\t}\n\t\t});\n\t};\n\n\tcloseChatSocket = () => {\n\t\tif (this.state.chatWs) {\n\t\t\tthis.state.chatWs.close();\n\t\t}\n\t};\n\n\tsetChatBoxRef = (ref) => {\n\t\tif (ref && ref.el) {\n\t\t\tthis.chatMessageBox = ref.el;\n\t\t}\n\t};\n\n\tsendMessage = (e) => {\n\t\tif (e.key === ENTER_KEY) {\n\t\t\te.preventDefault();\n\t\t\tconst message = this.chatMessageBox.value;\n\t\t\tif (message.trim().length > 0) {\n\t\t\t\tconst { username } = this.props;\n\t\t\t\tconst { to } = this.state;\n\t\t\t\tconst chatMessage = {\n\t\t\t\t\tusername,\n\t\t\t\t\tuserType: USER_TYPES.USER_TYPE_NORMAL,\n\t\t\t\t\tto,\n\t\t\t\t\tmessage,\n\t\t\t\t\ttype: MESSAGE_TYPES.MESSAGE_TYPE_NORMAL\n\t\t\t\t};\n\n\t\t\t\tthis.state.chatWs.emit('message', chatMessage);\n\n\t\t\t\tthis.chatMessageBox.value = '';\n\t\t\t\tthis.chatMessageBox.style.height = isMobile ? '32px' : '36px';\n\t\t\t}\n\t\t}\n\t};\n\n\tisInitializing = (condition) => {\n\t\tthis.setState({ chatSocketInitializing: condition });\n\t};\n\n\tresetUnreadMessages = () => {\n\t\tthis.setState({ unreadMessages: 0 });\n\t};\n\n\tremoveMessage = (id) => {\n\t\tthis.state.chatWs.emit('deleteMessage', id);\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tusername,\n\t\t\tuserType,\n\t\t\tuserInitialized,\n\t\t\tonMinimize,\n\t\t\tminimized,\n\t\t\tchatIsClosed,\n\t\t\tset_username\n\t\t} = this.props;\n\t\tconst {\n\t\t\tmessages,\n\t\t\tchatSocketInitialized,\n\t\t\tchatSocketInitializing,\n\t\t\tunreadMessages\n\t\t} = this.state;\n\n\t\treturn (\n\t\t\t<ChatWrapper\n\t\t\t\tchatSocketInitializing={chatSocketInitializing}\n\t\t\t\tchatSocketInitialized={chatSocketInitialized}\n\t\t\t\ttitle=\"Chat\"\n\t\t\t\tusername={username}\n\t\t\t\tuserType={userType}\n\t\t\t\tmessages={messages}\n\t\t\t\tunreadMessages={unreadMessages}\n\t\t\t\tsetChatBoxRef={this.setChatBoxRef}\n\t\t\t\tsendMessage={this.sendMessage}\n\t\t\t\tuserInitialized={userInitialized}\n\t\t\t\tminimized={minimized || !userInitialized || !chatSocketInitialized}\n\t\t\t\tminimizeChat={onMinimize}\n\t\t\t\tchatIsClosed={chatIsClosed}\n\t\t\t\tset_username={set_username}\n\t\t\t\tremoveMessage={this.removeMessage}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (store) => ({\n\tfetchingAuth: store.auth.fetching,\n\tusername: store.user.username,\n\tusername_set: store.user.username_set,\n\tuserType: store.auth.userType,\n\tuserInitialized: store.user.fetched,\n\tunreadMessages: store.app.chatUnreadMessages,\n\tset_username: store.user.settings.chat.set_username\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\tsetAnnouncements: bindActionCreators(setAnnouncements, dispatch),\n\tsetChatUnreadMessages: bindActionCreators(setChatUnreadMessages, dispatch),\n\tdispatch\n});\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Chat);\n"]},"metadata":{},"sourceType":"module"}