{"ast":null,"code":"import _classCallCheck from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/Documents/projects/hollaex/src/components/SnackNotification/SnackDialog.js\";\nimport React, { Component } from 'react';\nimport ReactSVG from 'react-svg';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport classnames from 'classnames';\nimport { ICONS } from '../../config/constants';\nimport SnackDialogContent from './SnackDialogContent';\nimport { closeSnackNotification, closeSnackDialog } from '../../actions/appActions';\nvar timeout = '';\nvar closeTimeOut = '';\nvar closeIconClicked = false;\n\nvar SnackDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SnackDialog, _Component);\n\n  function SnackDialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SnackDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SnackDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      closeSnack: false,\n      updateCloseControl: false\n    };\n\n    _this.onOutsideClick = function (event) {\n      var _this$props = _this.props,\n          snackProps = _this$props.snackProps,\n          closeSnackDialog = _this$props.closeSnackDialog;\n\n      if (snackProps.isDialog) {\n        var currentPopup = snackProps.dialogData[snackProps.dialogData.length - 1];\n\n        if (currentPopup) {\n          var temp = document.getElementById(currentPopup.id);\n\n          if (temp && event.target !== temp && !temp.contains(event.target) && !_this.state.updateCloseControl) {\n            closeSnackDialog(currentPopup.id);\n          } else {\n            _this.setState({\n              updateCloseControl: false\n            });\n          }\n        }\n      }\n    };\n\n    _this.closeDialog = function (id, e) {\n      closeIconClicked = true;\n\n      _this.props.closeSnackDialog(id);\n    };\n\n    return _this;\n  }\n\n  _createClass(SnackDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('click', this.onOutsideClick);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (this.props.snackProps.isDialog !== nextProps.snackProps.isDialog && nextProps.snackProps.isDialog) {\n        this.setState({\n          closeSnack: false\n        });\n        closeTimeOut = setTimeout(function () {\n          _this2.setState({\n            closeSnack: true\n          });\n        }, 1200);\n      }\n\n      if (this.props.snackProps.dialogData.length !== nextProps.snackProps.dialogData.length) {\n        if (closeIconClicked) {\n          this.setState({\n            updateCloseControl: true\n          });\n          closeIconClicked = false;\n        }\n\n        var currentPopup = nextProps.snackProps.dialogData[nextProps.snackProps.dialogData.length - 1];\n\n        if (currentPopup) {\n          timeout = setTimeout(function () {\n            _this2.props.closeSnackDialog(currentPopup.id);\n          }, 3000);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (timeout) clearTimeout(timeout);\n      if (closeTimeOut) clearTimeout(closeTimeOut);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var snackProps = this.props.snackProps;\n\n      if (!snackProps.isDialog) {\n        return null;\n      }\n\n      return snackProps.dialogData.map(function (data, index) {\n        return React.createElement(\"div\", {\n          id: data.id,\n          key: index,\n          className: classnames(\"snack_dialog-wrapper\", \"d-flex\", {\n            \"snack_dialog_open\": snackProps.isDialog,\n            \"snack_dialog_close\": _this3.state.closeSnack\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(SnackDialogContent, Object.assign({}, data, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"close-dialog pointer\",\n          onClick: function onClick(e) {\n            return _this3.closeDialog(data.id, e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(ReactSVG, {\n          path: ICONS.CANCEL_CROSS_ACTIVE,\n          wrapperClassName: \"bar-icon-back\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        })));\n      });\n    }\n  }]);\n\n  return SnackDialog;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    snackProps: state.app.snackNotification\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    closeSnackNotification: bindActionCreators(closeSnackNotification, dispatch),\n    closeSnackDialog: bindActionCreators(closeSnackDialog, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SnackDialog);","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/components/SnackNotification/SnackDialog.js"],"names":["React","Component","ReactSVG","connect","bindActionCreators","classnames","ICONS","SnackDialogContent","closeSnackNotification","closeSnackDialog","timeout","closeTimeOut","closeIconClicked","SnackDialog","state","closeSnack","updateCloseControl","onOutsideClick","event","props","snackProps","isDialog","currentPopup","dialogData","length","temp","document","getElementById","id","target","contains","setState","closeDialog","e","addEventListener","nextProps","setTimeout","clearTimeout","map","data","index","CANCEL_CROSS_ACTIVE","mapStateToProps","app","snackNotification","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactSVG from 'react-svg';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport classnames from 'classnames';\n\nimport { ICONS } from '../../config/constants';\nimport SnackDialogContent from './SnackDialogContent';\nimport { closeSnackNotification, closeSnackDialog } from '../../actions/appActions';\n\nlet timeout = '';\nlet closeTimeOut = '';\nlet closeIconClicked = false;\nclass SnackDialog extends Component {\n    state = {\n        closeSnack: false,\n        updateCloseControl: false\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.onOutsideClick);\n    }\n\n    onOutsideClick = event => {\n        const { snackProps, closeSnackDialog } = this.props;\n        if (snackProps.isDialog) {\n            const currentPopup = snackProps.dialogData[snackProps.dialogData.length - 1];\n            if (currentPopup) {\n                const temp = document.getElementById(currentPopup.id);\n                if (temp &&\n                    event.target !== temp &&\n                    !temp.contains(event.target) &&\n                    !this.state.updateCloseControl) {\n                        closeSnackDialog(currentPopup.id);\n                } else {\n                    this.setState({ updateCloseControl: false });\n                }\n            }\n        }\n    };\n    \n    componentWillReceiveProps(nextProps) {\n        if (this.props.snackProps.isDialog !== nextProps.snackProps.isDialog\n            && nextProps.snackProps.isDialog) {\n                this.setState({ closeSnack: false });\n                closeTimeOut = setTimeout(() => {\n                    this.setState({ closeSnack: true });\n                }, 1200);\n            }\n        if (this.props.snackProps.dialogData.length !== nextProps.snackProps.dialogData.length) {\n            if (closeIconClicked) {\n                this.setState({ updateCloseControl: true });\n                closeIconClicked = false;\n            }\n            const currentPopup = nextProps.snackProps.dialogData[nextProps.snackProps.dialogData.length - 1];\n            if (currentPopup) {\n                timeout = setTimeout(() => {\n                    this.props.closeSnackDialog(currentPopup.id);\n                }, 3000);\n            }\n        }\n    }\n\n    closeDialog = (id, e) => {\n        closeIconClicked = true;\n        this.props.closeSnackDialog(id);\n    }\n\n    componentWillUnmount() {\n        if (timeout) clearTimeout(timeout);\n        if (closeTimeOut) clearTimeout(closeTimeOut);\n    }\n    \n    render() {\n        const { snackProps } = this.props;\n        if (!snackProps.isDialog) {\n            return null;\n        }\n        return snackProps.dialogData.map((data, index) => (\n            <div\n                id={data.id}\n                key={index}\n                className={\n                    classnames(\n                        \"snack_dialog-wrapper\",\n                        \"d-flex\",\n                        {\n                            \"snack_dialog_open\": snackProps.isDialog,\n                            \"snack_dialog_close\": this.state.closeSnack,\n                        }\n                    )\n                }>\n                <SnackDialogContent {...data} />\n                <div className=\"close-dialog pointer\" onClick={(e) => this.closeDialog(data.id, e)}>\n                    <ReactSVG\n                        path={ICONS.CANCEL_CROSS_ACTIVE}\n                        wrapperClassName=\"bar-icon-back\"\n                    />\n                </div>\n            </div>\n        ))\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    snackProps: state.app.snackNotification\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    closeSnackNotification: bindActionCreators(closeSnackNotification, dispatch),\n    closeSnackDialog: bindActionCreators(closeSnackDialog, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SnackDialog);"]},"metadata":{},"sourceType":"module"}