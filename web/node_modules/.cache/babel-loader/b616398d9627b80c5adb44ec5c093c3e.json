{"ast":null,"code":"import _slicedToArray from \"/home/user/Documents/projects/hollaex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport math from 'mathjs';\nimport numbro from 'numbro';\nimport STRINGS from '../config/localizedStrings';\nimport { BASE_CURRENCY, DEFAULT_COIN_DATA } from '../config/constants';\nexport var BTC_FORMAT = '0,0.[0000]';\nexport var ETH_FORMAT = '0,0.[0000]';\nexport var XRP_FORMAT = '0,0.[]';\nexport var BCH_FORMAT = '0,0.[0000]';\nexport var BTC_FULL_FORMAT = '0,0.[00000000]';\nexport var ETH_FULL_FORMAT = '0,0.[00000000]';\nexport var XRP_FULL_FORMAT = '0,0.[0]';\nexport var BCH_FULL_FORMAT = '0,0.[00000000]';\nexport var BASE_FORMAT = '0,0.[0000]';\nexport var PERCENTAGE_FORMAT = '0.[00]%';\nexport var DONUT_PERCENTAGE_FORMAT = '0.[0]%';\nexport var AVERAGE_FORMAT = '3a'; // export const CURRENCY_FORMAT = {\n// \tBTC_FORMAT: '0,0.[0000]',\n// \tETH_FORMAT: '0,0.[0000]',\n// \tXRP_FORMAT: '0,0.[]',\n// \tBCH_FORMAT: '0,0.[0000]',\n// \tBTC_FULL_FORMAT: '0,0.[00000000]',\n// \tETH_FULL_FORMAT: '0,0.[00000000]',\n// \tXRP_FULL_FORMAT: '0,0.[0]',\n// \tBCH_FULL_FORMAT: '0,0.[00000000]',\n// \tEUR_FORMAT: '0,0.[0000]',\n// };\n\nexport var roundNumber = function roundNumber() {\n  var number = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n  if (number === 0) {\n    return 0;\n  } else if (decimals > 0) {\n    var multipliedNumber = math.multiply(math.fraction(number), math.pow(10, decimals));\n    var dividedNumber = math.divide(math.floor(multipliedNumber), math.pow(10, decimals));\n    return math.number(dividedNumber);\n  } else {\n    return math.floor(number);\n  }\n};\nexport var getFormat = function getFormat() {\n  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var fullFormat = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (fullFormat) {\n    return {\n      digit: 8,\n      format: '0,0.[00000000]'\n    };\n  } else if (min % 1) {\n    var point = min.toString().split('.')[1];\n    var res = point.split('').map(function (val) {\n      return 0;\n    }).join('');\n    return {\n      digit: point.length,\n      format: \"0,0.[\".concat(res, \"]\")\n    };\n  } else {\n    return {\n      digit: 4,\n      format: \"0,0.[0000]\"\n    };\n  }\n};\nexport var formatToCurrency = function formatToCurrency() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var fullFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var formatObj = getFormat(min, fullFormat);\n  return numbro(roundNumber(amount, formatObj.digit)).format(formatObj.format);\n};\nexport var formatCurrency = function formatCurrency() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_CURRENCY;\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'simple';\n\n  switch (currency.toLowerCase()) {\n    case 'btc':\n      return numbro(roundNumber(amount, 8)).format(BTC_FULL_FORMAT);\n\n    case 'eth':\n      return numbro(roundNumber(amount, 8)).format(ETH_FULL_FORMAT);\n\n    case 'bch':\n      return numbro(roundNumber(amount, 8)).format(BCH_FULL_FORMAT);\n\n    case 'xrp':\n      return numbro(roundNumber(amount, 8)).format(XRP_FULL_FORMAT);\n\n    case 'eur':\n      return numbro(roundNumber(amount, 8)).format(BASE_FORMAT);\n\n    default:\n      return numbro(roundNumber(amount, 8)).format(BASE_FORMAT);\n  }\n};\nexport var formatPercentage = function formatPercentage() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(math.number(value / 100)).format(PERCENTAGE_FORMAT);\n};\nexport var donutFormatPercentage = function donutFormatPercentage() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(math.number(value / 100)).format(DONUT_PERCENTAGE_FORMAT);\n};\nexport var formatBtcAmount = function formatBtcAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 4)).format(BTC_FORMAT);\n};\nexport var formatBtcFullAmount = function formatBtcFullAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 8)).format(BTC_FULL_FORMAT);\n};\nexport var formatBaseAmount = function formatBaseAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 2)).format(BASE_FORMAT);\n};\nexport var formatEthAmount = function formatEthAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 4)).format(ETH_FORMAT);\n};\nexport var formatEthFullAmount = function formatEthFullAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 8)).format(ETH_FULL_FORMAT);\n};\nexport var formatXrpAmount = function formatXrpAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 4)).format(XRP_FORMAT);\n};\nexport var formatXrpFullAmount = function formatXrpFullAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 8)).format(XRP_FULL_FORMAT);\n};\nexport var formatBchAmount = function formatBchAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 4)).format(BCH_FORMAT);\n};\nexport var formatBchFullAmount = function formatBchFullAmount() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(roundNumber(amount, 8)).format(BCH_FULL_FORMAT);\n};\nexport var formatNumber = function formatNumber(number) {\n  var round = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return roundNumber(number, round);\n};\nexport var formatAverage = function formatAverage() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return numbro(amount).format(AVERAGE_FORMAT);\n};\nexport var calculatePrice = function calculatePrice() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var price = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return math.number(math.multiply(math.fraction(value), math.fraction(price)));\n};\nexport var calculateBalancePrice = function calculateBalancePrice(balance, prices) {\n  var accumulated = math.fraction(0);\n  Object.entries(prices).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    if (balance.hasOwnProperty(\"\".concat(key, \"_balance\"))) {\n      accumulated = math.add(math.multiply(math.fraction(balance[\"\".concat(key, \"_balance\")]), math.fraction(value)), accumulated);\n    }\n  });\n  return math.number(accumulated);\n};\nexport var calculatePricePercentage = function calculatePricePercentage() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var total = arguments.length > 1 ? arguments[1] : undefined;\n  var priceTotal = total ? total : 1;\n  return math.number(math.multiply(math.divide(math.fraction(value), math.fraction(priceTotal)), 100));\n};\nexport var generateWalletActionsText = function generateWalletActionsText(symbol, coins) {\n  var useFullName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var _ref3 = coins[symbol] || DEFAULT_COIN_DATA,\n      fullname = _ref3.fullname;\n\n  var name = fullname;\n  var nameToDisplay = useFullName ? fullname : name;\n  var depositText = \"\".concat(symbol === BASE_CURRENCY ? STRINGS.WALLET_BUTTON_BASE_DEPOSIT : STRINGS.WALLET_BUTTON_CRYPTOCURRENCY_DEPOSIT, \" \").concat(nameToDisplay);\n  var withdrawText = \"\".concat(symbol === BASE_CURRENCY ? STRINGS.WALLET_BUTTON_BASE_WITHDRAW : STRINGS.WALLET_BUTTON_CRYPTOCURRENCY_WITHDRAW, \" \").concat(nameToDisplay);\n  return {\n    depositText: depositText,\n    withdrawText: withdrawText\n  };\n};\nexport var getCurrencyFromName = function getCurrencyFromName() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  switch (name.toLowerCase()) {\n    case 'btc':\n    case 'bitcoin':\n      return 'btc';\n\n    case 'eth':\n    case 'ethereum':\n      return 'eth';\n\n    case 'bch':\n    case 'bitcoincash':\n      return 'bch';\n\n    case 'xrp':\n    case 'ripple':\n      return 'xrp';\n\n    case 'eur':\n    case 'euro':\n      return 'eur';\n\n    default:\n      return '';\n  }\n};\nexport var getCurrencyFromSymbol = function getCurrencyFromSymbol() {\n  var symbol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  switch (symbol.toLowerCase()) {\n    case 'btc':\n    case 'bitcoin':\n      return 'bitcoin';\n\n    case 'eth':\n    case 'ethereum':\n      return 'ethereum';\n\n    case 'bch':\n    case 'bitcoincash':\n      return 'bitcoincash';\n\n    case 'xrp':\n      return 'ripple';\n\n    case 'eur':\n    case 'euro':\n      return 'euro';\n\n    default:\n      return '';\n  }\n};\nexport var checkNonBasePair = function checkNonBasePair(pair, coins) {\n  var _ref4 = coins[BASE_CURRENCY] || DEFAULT_COIN_DATA,\n      _ref4$symbol = _ref4.symbol,\n      symbol = _ref4$symbol === void 0 ? '' : _ref4$symbol;\n\n  return !pair.includes(symbol.toLowerCase());\n};\nexport var toFixed = function toFixed(exponential) {\n  if (Math.abs(exponential) < 1.0) {\n    var e = parseInt(exponential.toString().split('e-')[1], 10);\n\n    if (e) {\n      exponential *= Math.pow(10, e - 1);\n      exponential = '0.' + new Array(e).join('0') + exponential.toString().substring(2);\n    }\n  } else {\n    var _e = parseInt(exponential.toString().split('+')[1], 10);\n\n    if (_e > 20) {\n      _e -= 20;\n      exponential /= Math.pow(10, _e);\n      exponential += new Array(_e + 1).join('0');\n    }\n  }\n\n  return exponential;\n};","map":{"version":3,"sources":["/home/user/Documents/projects/hollaex/src/utils/currency.js"],"names":["math","numbro","STRINGS","BASE_CURRENCY","DEFAULT_COIN_DATA","BTC_FORMAT","ETH_FORMAT","XRP_FORMAT","BCH_FORMAT","BTC_FULL_FORMAT","ETH_FULL_FORMAT","XRP_FULL_FORMAT","BCH_FULL_FORMAT","BASE_FORMAT","PERCENTAGE_FORMAT","DONUT_PERCENTAGE_FORMAT","AVERAGE_FORMAT","roundNumber","number","decimals","multipliedNumber","multiply","fraction","pow","dividedNumber","divide","floor","getFormat","min","fullFormat","digit","format","point","toString","split","res","map","val","join","length","formatToCurrency","amount","formatObj","formatCurrency","currency","type","toLowerCase","formatPercentage","value","donutFormatPercentage","formatBtcAmount","formatBtcFullAmount","formatBaseAmount","formatEthAmount","formatEthFullAmount","formatXrpAmount","formatXrpFullAmount","formatBchAmount","formatBchFullAmount","formatNumber","round","formatAverage","calculatePrice","price","calculateBalancePrice","balance","prices","accumulated","Object","entries","forEach","key","hasOwnProperty","add","calculatePricePercentage","total","priceTotal","generateWalletActionsText","symbol","coins","useFullName","fullname","name","nameToDisplay","depositText","WALLET_BUTTON_BASE_DEPOSIT","WALLET_BUTTON_CRYPTOCURRENCY_DEPOSIT","withdrawText","WALLET_BUTTON_BASE_WITHDRAW","WALLET_BUTTON_CRYPTOCURRENCY_WITHDRAW","getCurrencyFromName","getCurrencyFromSymbol","checkNonBasePair","pair","includes","toFixed","exponential","Math","abs","e","parseInt","Array","substring"],"mappings":"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","sourcesContent":["import math from 'mathjs';\nimport numbro from 'numbro';\nimport STRINGS from '../config/localizedStrings';\nimport { BASE_CURRENCY, DEFAULT_COIN_DATA } from '../config/constants';\n\nexport const BTC_FORMAT = '0,0.[0000]';\nexport const ETH_FORMAT = '0,0.[0000]';\nexport const XRP_FORMAT = '0,0.[]';\nexport const BCH_FORMAT = '0,0.[0000]';\nexport const BTC_FULL_FORMAT = '0,0.[00000000]';\nexport const ETH_FULL_FORMAT = '0,0.[00000000]';\nexport const XRP_FULL_FORMAT = '0,0.[0]';\nexport const BCH_FULL_FORMAT = '0,0.[00000000]';\nexport const BASE_FORMAT = '0,0.[0000]';\nexport const PERCENTAGE_FORMAT = '0.[00]%';\nexport const DONUT_PERCENTAGE_FORMAT = '0.[0]%';\nexport const AVERAGE_FORMAT = '3a';\n\n// export const CURRENCY_FORMAT = {\n// \tBTC_FORMAT: '0,0.[0000]',\n// \tETH_FORMAT: '0,0.[0000]',\n// \tXRP_FORMAT: '0,0.[]',\n// \tBCH_FORMAT: '0,0.[0000]',\n// \tBTC_FULL_FORMAT: '0,0.[00000000]',\n// \tETH_FULL_FORMAT: '0,0.[00000000]',\n// \tXRP_FULL_FORMAT: '0,0.[0]',\n// \tBCH_FULL_FORMAT: '0,0.[00000000]',\n// \tEUR_FORMAT: '0,0.[0000]',\n// };\n\nexport const roundNumber = (number = 0, decimals = 4) => {\n\tif (number === 0) {\n\t\treturn 0;\n\t} else if (decimals > 0) {\n\t\tconst multipliedNumber = math.multiply(\n\t\t\tmath.fraction(number),\n\t\t\tmath.pow(10, decimals)\n\t\t);\n\t\tconst dividedNumber = math.divide(\n\t\t\tmath.floor(multipliedNumber),\n\t\t\tmath.pow(10, decimals)\n\t\t);\n\t\treturn math.number(dividedNumber);\n\t} else {\n\t\treturn math.floor(number);\n\t}\n};\n\nexport const getFormat = (min = 0, fullFormat) => {\n\tif (fullFormat) {\n\t\treturn { digit: 8, format: '0,0.[00000000]' };\n\t} else if (min % 1) {\n\t\tlet point = min.toString().split('.')[1];\n\t\tlet res = point.split('').map(val => 0).join('');\n\t\treturn { digit: point.length, format: `0,0.[${res}]` };\n\t} else {\n\t\treturn { digit: 4, format: `0,0.[0000]` };\n\t}\n};\n\nexport const formatToCurrency = (amount = 0, min = 0, fullFormat = false) => {\n\tlet formatObj = getFormat(min, fullFormat);\n\treturn numbro(roundNumber(amount, formatObj.digit)).format(formatObj.format);\n};\n\nexport const formatCurrency = (amount = 0, currency = BASE_CURRENCY, type = 'simple') => {\n\tswitch (currency.toLowerCase()) {\n\t\tcase 'btc':\n\t\t\treturn numbro(roundNumber(amount, 8)).format(BTC_FULL_FORMAT);\n\t\tcase 'eth':\n\t\t\treturn numbro(roundNumber(amount, 8)).format(ETH_FULL_FORMAT);\n\t\tcase 'bch':\n\t\t\treturn numbro(roundNumber(amount, 8)).format(BCH_FULL_FORMAT);\n\t\tcase 'xrp':\n\t\t\treturn numbro(roundNumber(amount, 8)).format(XRP_FULL_FORMAT);\n\t\tcase 'eur':\n\t\t\treturn numbro(roundNumber(amount, 8)).format(BASE_FORMAT);\n\t\tdefault:\n\t\t\treturn numbro(roundNumber(amount, 8)).format(BASE_FORMAT); \n\t}\n}\nexport const formatPercentage = (value = 0) =>\n\tnumbro(math.number(value / 100)).format(PERCENTAGE_FORMAT);\nexport const donutFormatPercentage = (value = 0) =>\n\tnumbro(math.number(value / 100)).format(DONUT_PERCENTAGE_FORMAT);\nexport const formatBtcAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 4)).format(BTC_FORMAT);\nexport const formatBtcFullAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 8)).format(BTC_FULL_FORMAT);\nexport const formatBaseAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 2)).format(BASE_FORMAT);\nexport const formatEthAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 4)).format(ETH_FORMAT);\nexport const formatEthFullAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 8)).format(ETH_FULL_FORMAT);\nexport const formatXrpAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 4)).format(XRP_FORMAT);\nexport const formatXrpFullAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 8)).format(XRP_FULL_FORMAT);\nexport const formatBchAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 4)).format(BCH_FORMAT);\nexport const formatBchFullAmount = (amount = 0) =>\n\tnumbro(roundNumber(amount, 8)).format(BCH_FULL_FORMAT);\nexport const formatNumber = (number, round = 0) => {\n\treturn roundNumber(number, round);\n};\nexport const formatAverage = (amount = 0) =>\n\tnumbro(amount).format(AVERAGE_FORMAT);\n\nexport const calculatePrice = (value = 0, price = 1) =>\n\tmath.number(math.multiply(math.fraction(value), math.fraction(price)));\n\nexport const calculateBalancePrice = (balance, prices) => {\n\tlet accumulated = math.fraction(0);\n\tObject.entries(prices).forEach(([key, value]) => {\n\t\tif (balance.hasOwnProperty(`${key}_balance`)) {\n\t\t\taccumulated = math.add(\n\t\t\t\tmath.multiply(\n\t\t\t\t\tmath.fraction(balance[`${key}_balance`]),\n\t\t\t\t\tmath.fraction(value)\n\t\t\t\t),\n\t\t\t\taccumulated\n\t\t\t);\n\t\t}\n\t});\n\treturn math.number(accumulated);\n};\n\nexport const calculatePricePercentage = (value = 0, total) => {\n\tconst priceTotal = total ? total : 1;\n\treturn math.number(math.multiply(math.divide(math.fraction(value), math.fraction(priceTotal)), 100));\n};\n\nexport const generateWalletActionsText = (symbol, coins, useFullName = false) => {\n\tconst { fullname } = coins[symbol] || DEFAULT_COIN_DATA;\n\tconst name = fullname;\n\n\tconst nameToDisplay = useFullName ? fullname : name;\n\n\tconst depositText = `${\n\t\tsymbol === BASE_CURRENCY\n\t\t\t? STRINGS.WALLET_BUTTON_BASE_DEPOSIT\n\t\t\t: STRINGS.WALLET_BUTTON_CRYPTOCURRENCY_DEPOSIT\n\t} ${nameToDisplay}`;\n\tconst withdrawText = `${\n\t\tsymbol === BASE_CURRENCY\n\t\t\t? STRINGS.WALLET_BUTTON_BASE_WITHDRAW\n\t\t\t: STRINGS.WALLET_BUTTON_CRYPTOCURRENCY_WITHDRAW\n\t} ${nameToDisplay}`;\n\n\treturn {\n\t\tdepositText,\n\t\twithdrawText\n\t};\n};\n\nexport const getCurrencyFromName = (name = '') => {\n\tswitch (name.toLowerCase()) {\n\t\tcase 'btc':\n\t\tcase 'bitcoin':\n\t\t\treturn 'btc';\n\t\tcase 'eth':\n\t\tcase 'ethereum':\n\t\t\treturn 'eth';\n\t\tcase 'bch':\n\t\tcase 'bitcoincash':\n\t\t\treturn 'bch';\n\t\tcase 'xrp':\n\t\tcase 'ripple':\n\t\t\treturn 'xrp';\n\t\tcase 'eur':\n\t\tcase 'euro':\n\t\t\treturn 'eur';\n\t\tdefault:\n\t\t\treturn '';\n\t}\n};\n\nexport const getCurrencyFromSymbol = (symbol = '') => {\n\tswitch (symbol.toLowerCase()) {\n\t\tcase 'btc':\n\t\tcase 'bitcoin':\n\t\t\treturn 'bitcoin';\n\t\tcase 'eth':\n\t\tcase 'ethereum':\n\t\t\treturn 'ethereum';\n\t\tcase 'bch':\n\t\tcase 'bitcoincash':\n\t\t\treturn 'bitcoincash';\n\t\tcase 'xrp':\n\t\t\treturn 'ripple';\n\t\tcase 'eur':\n\t\tcase 'euro':\n\t\t\treturn 'euro';\n\t\tdefault:\n\t\t\treturn '';\n\t}\n};\n\nexport const checkNonBasePair = (pair, coins) => {\n\tconst { symbol = '' } = coins[BASE_CURRENCY] || DEFAULT_COIN_DATA;\n\treturn !pair.includes(symbol.toLowerCase());\n};\n\nexport const toFixed = (exponential) => {\n\tif (Math.abs(exponential) < 1.0) {\n\t\tlet e = parseInt(exponential.toString().split('e-')[1], 10);\n\t\tif (e) {\n\t\t\texponential *= Math.pow(10, e - 1);\n\t\t\texponential = '0.' + (new Array(e)).join('0') + exponential.toString().substring(2);\n\t\t}\n\t} else {\n\t\tlet e = parseInt(exponential.toString().split('+')[1], 10);\n\t\tif (e > 20) {\n\t\t\te -= 20;\n\t\t\texponential /= Math.pow(10, e);\n\t\t\texponential += (new Array(e + 1)).join('0');\n\t\t}\n\t}\n\treturn exponential;\n}\n\n"]},"metadata":{},"sourceType":"module"}